{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/ICallProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface ICallProxy {\n\n    /// @dev Chain from which the current submission is received\n    function submissionChainIdFrom() external view returns (uint256);\n    /// @dev Native sender of the current submission\n    function submissionNativeSender() external view returns (bytes memory);\n\n    /// @dev Used for calls where native asset transfer is involved.\n    /// @param _reserveAddress Receiver of the tokens if the call to _receiver fails\n    /// @param _receiver Contract to be called\n    /// @param _data Call data\n    /// @param _flags Flags to change certain behavior of this function, see Flags library for more details\n    /// @param _nativeSender Native sender\n    /// @param _chainIdFrom Id of a chain that originated the request\n    function call(\n        address _reserveAddress,\n        address _receiver,\n        bytes memory _data,\n        uint256 _flags,\n        bytes memory _nativeSender,\n        uint256 _chainIdFrom\n    ) external payable returns (bool);\n\n    /// @dev Used for calls where ERC20 transfer is involved.\n    /// @param _token Asset address\n    /// @param _reserveAddress Receiver of the tokens if the call to _receiver fails\n    /// @param _receiver Contract to be called\n    /// @param _data Call data\n    /// @param _flags Flags to change certain behavior of this function, see Flags library for more details\n    /// @param _nativeSender Native sender\n    /// @param _chainIdFrom Id of a chain that originated the request\n    function callERC20(\n        address _token,\n        address _reserveAddress,\n        address _receiver,\n        bytes memory _data,\n        uint256 _flags,\n        bytes memory _nativeSender,\n        uint256 _chainIdFrom\n    ) external returns (bool);\n}"
    },
    "contracts/periphery/CallProxy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"../interfaces/ICallProxy.sol\";\nimport \"../libraries/Flags.sol\";\nimport \"../libraries/BytesLib.sol\";\nimport \"../libraries/MultiSendCallOnly.sol\";\n\n/// @dev Proxy to execute the other contract calls.\n/// This contract is used when a user requests transfer with specific call of other contract.\ncontract CallProxy is Initializable, AccessControlUpgradeable, MultiSendCallOnly, ICallProxy {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using Flags for uint256;\n    using AddressUpgradeable for address;\n\n    /* ========== STATE VARIABLES ========== */\n    /// @dev Role allowed to withdraw fee\n    bytes32 public constant DEBRIDGE_GATE_ROLE = keccak256(\"DEBRIDGE_GATE_ROLE\");\n\n    /// @dev Value for lock variable when function is not entered\n    uint256 private constant _NOT_LOCKED = 1;\n    /// @dev Value for lock variable when function is entered\n    uint256 private constant _LOCKED = 2;\n\n    /// @dev Chain from which the current submission is received\n    uint256 public override submissionChainIdFrom;\n    /// @dev Native sender of the current submission\n    bytes public override submissionNativeSender;\n\n    uint256 private _lock;\n\n    /* ========== ERRORS ========== */\n\n    error DeBridgeGateBadRole();\n    error CallProxyBadRole();\n    error ExternalCallFailed();\n    error NotEnoughSafeTxGas();\n    error CallFailed();\n    error Locked();\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyGateRole() {\n        if (!hasRole(DEBRIDGE_GATE_ROLE, msg.sender)) revert DeBridgeGateBadRole();\n        _;\n    }\n\n    /// @dev lock\n    modifier lock() {\n        if (_lock == _LOCKED) revert Locked();\n        _lock = _LOCKED;\n        _;\n        _lock = _NOT_LOCKED;\n    }\n\n    /* ========== CONSTRUCTOR  ========== */\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {\n    }\n    \n    function initialize() public initializer {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    /* ========== PUBLIC METHODS ========== */\n\n    /// @inheritdoc ICallProxy\n    function call(\n        address _reserveAddress,\n        address _receiver,\n        bytes memory _data,\n        uint256 _flags,\n        bytes memory _nativeSender,\n        uint256 _chainIdFrom\n    ) external payable override onlyGateRole lock returns (bool _result) {\n        uint256 amount = address(this).balance;\n\n        _result = _externalCall(\n            _receiver,\n            amount,\n            _data,\n            _nativeSender,\n            _chainIdFrom,\n            _flags\n        );\n\n        if (!_result && _flags.getFlag(Flags.REVERT_IF_EXTERNAL_FAIL)) {\n            revert ExternalCallFailed();\n        }\n\n        amount = address(this).balance;\n        if (amount > 0) {\n            (bool success, ) = _reserveAddress.call{value: amount}(new bytes(0));\n            if (!success) revert CallFailed();\n        }\n    }\n\n    /// @inheritdoc ICallProxy\n    function callERC20(\n        address _token,\n        address _reserveAddress,\n        address _receiver,\n        bytes memory _data,\n        uint256 _flags,\n        bytes memory _nativeSender,\n        uint256 _chainIdFrom\n    ) external override onlyGateRole lock returns (bool _result) {\n        uint256 amount = IERC20Upgradeable(_token).balanceOf(address(this));\n        if (_receiver != address(0)) {\n            _customApprove(IERC20Upgradeable(_token), _receiver, amount);\n        }\n        _result = _externalCall(\n            _receiver,\n            0,\n            _data,\n            _nativeSender,\n            _chainIdFrom,\n            _flags\n        );\n\n        amount = IERC20Upgradeable(_token).balanceOf(address(this));\n\n        if (!_result &&_flags.getFlag(Flags.REVERT_IF_EXTERNAL_FAIL)) {\n            revert ExternalCallFailed();\n        }\n        if (amount > 0) {\n            IERC20Upgradeable(_token).safeTransfer(_reserveAddress, amount);\n        }\n        if (_receiver != address(0)) {\n            _customApprove(IERC20Upgradeable(_token), _receiver, 0);\n        }\n    }\n\n    /// @dev Sends multiple transactions and reverts all if one fails.\n    /// @param transactions Encoded transactions. Each transaction is encoded as a packed bytes of\n    ///                     operation has to be uint8(0) in this version (=> 1 byte),\n    ///                     to as a address (=> 20 bytes),\n    ///                     value as a uint256 (=> 32 bytes),\n    ///                     data length as a uint256 (=> 32 bytes),\n    ///                     data as bytes.\n    ///                     see abi.encodePacked for more information on packed encoding\n    /// @notice The code is for most part the same as the normal MultiSend (to keep compatibility),\n    ///         but reverts if a transaction tries to use a delegatecall.\n    /// @notice This method is payable as delegatecalls keep the msg.value from the previous call\n    ///         If the calling method (e.g. execTransaction) received ETH this would revert otherwise\n    function multiSend(bytes memory transactions) external payable {\n        if (address(this) != msg.sender) revert CallProxyBadRole();\n        _multiSend(transactions);\n    }\n\n    // we need to accept ETH from deBridgeGate\n    receive() external payable {\n    }\n\n    /* ========== INTERNAL METHODS ========== */\n\n    function _externalCall(\n        address _destination,\n        uint256 _value,\n        bytes memory _data,\n        bytes memory _nativeSender,\n        uint256 _chainIdFrom,\n        uint256 _flags\n    ) internal returns (bool result) {\n        bool storeSender = _flags.getFlag(Flags.PROXY_WITH_SENDER);\n        bool checkGasLimit = _flags.getFlag(Flags.SEND_EXTERNAL_CALL_GAS_LIMIT);\n        bool multisendFlag = _flags.getFlag(Flags.MULTI_SEND);\n        // Temporary write to a storage nativeSender and chainIdFrom variables.\n        // External contract can read them during a call if needed\n        if (storeSender) {\n            submissionChainIdFrom = _chainIdFrom;\n            submissionNativeSender = _nativeSender;\n        }\n\n        uint256 safeTxGas;\n        if (checkGasLimit && _data.length > 4) {\n            safeTxGas = BytesLib.toUint32(_data, 0);\n\n            // Remove first 4 bytes from data\n            _data = BytesLib.slice(_data, 4, _data.length - 4);\n        }\n\n        // We require some gas to finish transaction emit the events, approve(0) etc (at least 15000) after the execution and some to perform code until the execution (500)\n        // We also include the 1/64 in the check that is not send along with a call to counteract potential shortings because of EIP-150\n        if (gasleft() < safeTxGas * 64 / 63 + 15500) revert NotEnoughSafeTxGas();\n        // if safeTxGas is zero set gasleft\n        safeTxGas = safeTxGas == 0 ? gasleft() : uint256(safeTxGas);\n\n        if (multisendFlag) {\n            _destination = address(this);\n            assembly {\n                result := call(safeTxGas, _destination, _value, add(_data, 0x20), mload(_data), 0, 0)\n            }\n        }\n        // check if _destination is a contract;\n        // this is crucial because the CALL opcode will succeed when arbitrary data is\n        // called against EOA, causing undesired behavior and possible asset loss.\n        // Thus, we allow calls only to contracts explicitly\n        else if (_destination.isContract()) {\n            assembly {\n                result := call(safeTxGas, _destination, _value, add(_data, 0x20), mload(_data), 0, 0)\n            }\n        }\n        // clear storage variables to get gas refund\n        if (storeSender) {\n            submissionChainIdFrom = 0;\n            submissionNativeSender = \"\";\n        }\n    }\n\n    function _customApprove(IERC20Upgradeable token, address spender, uint value) internal {\n        bytes memory returndata = address(token).functionCall(\n            abi.encodeWithSelector(token.approve.selector, spender, value),\n            \"ERC20 approve failed\"\n        );\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"ERC20 operation did not succeed\");\n        }\n    }\n\n    // ============ Version Control ============\n\n     /// @dev Get this contract's version\n    function version() external pure returns (uint256) {\n        return 424; // 4.2.4\n    }\n}"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal initializer {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/libraries/Flags.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.7;\n\nlibrary Flags {\n\n    /* ========== FLAGS ========== */\n\n    /// @dev Flag to unwrap ETH\n    uint256 public constant UNWRAP_ETH = 0;\n    /// @dev Flag to revert if external call fails\n    uint256 public constant REVERT_IF_EXTERNAL_FAIL = 1;\n    /// @dev Flag to call proxy with a sender contract\n    uint256 public constant PROXY_WITH_SENDER = 2;\n    /// @dev Data is hash in DeBridgeGate send method\n    uint256 public constant SEND_HASHED_DATA = 3;\n    /// @dev First 24 bytes from data is gas limit for external call\n    uint256 public constant SEND_EXTERNAL_CALL_GAS_LIMIT = 4;\n    /// @dev Support multi send for externall call\n    uint256 public constant MULTI_SEND = 5;\n\n    /// @dev Get flag\n    /// @param _packedFlags Flags packed to uint256\n    /// @param _flag Flag to check\n    function getFlag(\n        uint256 _packedFlags,\n        uint256 _flag\n    ) internal pure returns (bool) {\n        uint256 flag = (_packedFlags >> _flag) & uint256(1);\n        return flag == 1;\n    }\n\n    /// @dev Set flag\n    /// @param _packedFlags Flags packed to uint256\n    /// @param _flag Flag to set\n    /// @param _value Is set or not set\n     function setFlag(\n         uint256 _packedFlags,\n         uint256 _flag,\n         bool _value\n     ) internal pure returns (uint256) {\n         if (_value)\n             return _packedFlags | uint256(1) << _flag;\n         else\n             return _packedFlags & ~(uint256(1) << _flag);\n     }\n}\n"
    },
    "contracts/libraries/BytesLib.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.8.0 <0.9.0;\n\n\nlibrary BytesLib {\n    function concat(\n        bytes memory _preBytes,\n        bytes memory _postBytes\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        bytes memory tempBytes;\n\n        assembly {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n            // Store the length of the first bytes array at the beginning of\n            // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n            // Maintain a memory counter for the current write location in the\n            // temp bytes array by adding the 32 bytes for the array length to\n            // the starting location.\n            let mc := add(tempBytes, 0x20)\n            // Stop copying when the memory counter reaches the length of the\n            // first bytes array.\n            let end := add(mc, length)\n\n            for {\n                // Initialize a copy counter to the start of the _preBytes data,\n                // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n                // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                // Write the _preBytes data into the tempBytes memory 32 bytes\n                // at a time.\n                mstore(mc, mload(cc))\n            }\n\n            // Add the length of _postBytes to the current length of tempBytes\n            // and store it as the new length in the first 32 bytes of the\n            // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n            // Move the memory counter back from a multiple of 0x20 to the\n            // actual end of the _preBytes data.\n            mc := end\n            // Stop copying when the memory counter reaches the new combined\n            // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            // Update the free-memory pointer by padding our last write location\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n            // next 32 byte block, then round down to the nearest multiple of\n            // 32. If the sum of the length of the two arrays is zero then add\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(0x40, and(\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n              not(31) // Round down to the nearest 32 bytes.\n            ))\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n        assembly {\n            // Read the first 32 bytes of _preBytes storage, which is the length\n            // of the array. (We don't need to use the offset into the slot\n            // because arrays use the entire slot.)\n            let fslot := sload(_preBytes.slot)\n            // Arrays of 31 bytes or less have an even value in their slot,\n            // while longer arrays have an odd value. The actual length is\n            // the slot divided by two for odd values, and the lowest order\n            // byte divided by two for even values.\n            // If the slot is even, bitwise and the slot with 255 and divide by\n            // two to get the length. If the slot is odd, bitwise and the slot\n            // with -1 and divide by two.\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n                // Since the new array still fits in the slot, we just need to\n                // update the contents of the slot.\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                    _preBytes.slot,\n                    // all the modifications to the slot are inside this\n                    // next block\n                    add(\n                        // we can just add to the slot contents because the\n                        // bytes we want to change are the LSBs\n                        fslot,\n                        add(\n                            mul(\n                                div(\n                                    // load the bytes from memory\n                                    mload(add(_postBytes, 0x20)),\n                                    // zero all bytes to the right\n                                    exp(0x100, sub(32, mlength))\n                                ),\n                                // and now shift left the number of bytes to\n                                // leave space for the length in the slot\n                                exp(0x100, sub(32, newlength))\n                            ),\n                            // increase length by the double of the memory\n                            // bytes length\n                            mul(mlength, 2)\n                        )\n                    )\n                )\n            }\n            case 1 {\n                // The stored value fits in the slot, but the combined value\n                // will exceed it.\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // The contents of the _postBytes array start 32 bytes into\n                // the structure. Our first read should obtain the `submod`\n                // bytes that can fit into the unused space in the last word\n                // of the stored array. To get this, we read 32 bytes starting\n                // from `submod`, so the data we read overlaps with the array\n                // contents by `submod` bytes. Masking the lowest-order\n                // `submod` bytes allows us to add that value directly to the\n                // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(\n                    sc,\n                    add(\n                        and(\n                            fslot,\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n                        ),\n                        and(mload(mc), mask)\n                    )\n                )\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // Copy over the first `submod` bytes of the new data as in\n                // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // The first word of the slice result is potentially a partial\n                // word read from the original array. To read it, we calculate\n                // the length of that partial word and start copying that many\n                // bytes into the array. The first word we copy will start with\n                // data we don't care about, but the last `lengthmod` bytes will\n                // land at the beginning of the contents of the new array. When\n                // we're done copying, we overwrite the full first word with\n                // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n                // The multiplication in the next line is necessary\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n                // the following copy loop was copying the origin's length\n                // and then ending prematurely not copying everything it should.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                    // The multiplication in the next line has the same exact purpose\n                    // as the one above.\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n                //update free-memory pointer\n                //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n                //zero out the 32 bytes slice we are about to return\n                //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\n        require(_bytes.length >= _start + 1 , \"toUint8_outOfBounds\");\n        uint8 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n        uint32 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x4), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n        uint64 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x8), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n        uint96 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0xc), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n        uint128 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x10), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                // the next line is the loop condition:\n                // while(uint256(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(\n        bytes storage _preBytes,\n        bytes memory _postBytes\n    )\n        internal\n        view\n        returns (bool)\n    {\n        bool success = true;\n\n        assembly {\n            // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes.slot)\n            // Decode the length of the stored array like in concatStorage().\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n                // slength can contain both the length and contents of the array\n                // if length < 32 bytes so let's prepare for that\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                        // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                            // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                        // cb is a circuit breaker in the for loop since there's\n                        //  no said feature for inline assembly loops\n                        // cb = 1 - don't breaker\n                        // cb = 0 - break\n                        let cb := 1\n\n                        // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes.slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                        // the next line is the loop condition:\n                        // while(uint256(mc < end) + cb == 2)\n                        for {} eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                                // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}"
    },
    "contracts/libraries/MultiSendCallOnly.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title Multi Send Call Only - Allows to batch multiple transactions into one, but only calls\n/// @author Stefan George - <stefan@gnosis.io>\n/// @author Richard Meissner - <richard@gnosis.io>\n/// @notice The guard logic is not required here as this contract doesn't support nested delegate calls\ncontract MultiSendCallOnly {\n    /// @dev Sends multiple transactions and reverts all if one fails.\n    /// @param transactions Encoded transactions. Each transaction is encoded as a packed bytes of\n    ///                     operation has to be uint8(0) in this version (=> 1 byte),\n    ///                     to as a address (=> 20 bytes),\n    ///                     value as a uint256 (=> 32 bytes),\n    ///                     data length as a uint256 (=> 32 bytes),\n    ///                     data as bytes.\n    ///                     see abi.encodePacked for more information on packed encoding\n    /// @notice The code is for most part the same as the normal MultiSend (to keep compatibility),\n    ///         but reverts if a transaction tries to use a delegatecall.\n    /// @notice This method is payable as delegatecalls keep the msg.value from the previous call\n    ///         If the calling method (e.g. execTransaction) received ETH this would revert otherwise\n    function _multiSend(bytes memory transactions) internal {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let length := mload(transactions)\n            let i := 0x20\n            for {\n                // Pre block is not used in \"while mode\"\n            } lt(i, length) {\n                // Post block is not used in \"while mode\"\n            } {\n                // First byte of the data is the operation.\n                // We shift by 248 bits (256 - 8 [operation byte]) it right since mload will always load 32 bytes (a word).\n                // This will also zero out unused data.\n                let operation := shr(0xf8, mload(add(transactions, i)))\n                // We offset the load address by 1 byte (operation byte)\n                // We shift it right by 96 bits (256 - 160 [20 address bytes]) to right-align the data and zero out unused data.\n                let to := shr(0x60, mload(add(transactions, add(i, 0x01))))\n                // We offset the load address by 21 byte (operation byte + 20 address bytes)\n                let value := mload(add(transactions, add(i, 0x15)))\n                // We offset the load address by 53 byte (operation byte + 20 address bytes + 32 value bytes)\n                let dataLength := mload(add(transactions, add(i, 0x35)))\n                // We offset the load address by 85 byte (operation byte + 20 address bytes + 32 value bytes + 32 data length bytes)\n                let data := add(transactions, add(i, 0x55))\n                let success := 0\n                switch operation\n                    case 0 {\n                        success := call(gas(), to, value, data, dataLength, 0, 0)\n                    }\n                    // This version does not allow delegatecalls\n                    case 1 {\n                        revert(0, 0)\n                    }\n                if eq(success, 0) {\n                    revert(0, 0)\n                }\n                // Next entry starts at 85 byte + data length\n                i := add(i, add(0x55, dataLength))\n            }\n        }\n    }\n}"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal initializer {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal initializer {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/transfers/DeBridgeGate.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"../interfaces/IERC20Permit.sol\";\nimport \"../interfaces/IDeBridgeToken.sol\";\nimport \"../interfaces/IDeBridgeTokenDeployer.sol\";\nimport \"../interfaces/ISignatureVerifier.sol\";\nimport \"../interfaces/IWETH.sol\";\nimport \"../interfaces/IDeBridgeGate.sol\";\nimport \"../interfaces/ICallProxy.sol\";\nimport \"../libraries/SignatureUtil.sol\";\nimport \"../libraries/Flags.sol\";\nimport \"../interfaces/IWethGate.sol\";\n\n/// @dev Contract for assets transfers. The user can transfer the asset to any of the approved chains.\n/// The admin manages the assets, fees and other important protocol parameters.\ncontract DeBridgeGate is\n    Initializable,\n    AccessControlUpgradeable,\n    PausableUpgradeable,\n    ReentrancyGuardUpgradeable,\n    IDeBridgeGate\n{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using SignatureUtil for bytes;\n    using Flags for uint256;\n\n    /* ========== STATE VARIABLES ========== */\n\n    /// @dev Basis points or bps, set to 10 000 (equal to 1/10000). Used to express relative values (fees)\n    uint256 public constant BPS_DENOMINATOR = 10000;\n    /// @dev Role allowed to stop transfers\n    bytes32 public constant GOVMONITORING_ROLE = keccak256(\"GOVMONITORING_ROLE\");\n\n    /// @dev prefix to calculation submissionId\n    uint256 public constant SUBMISSION_PREFIX = 1;\n    /// @dev prefix to calculation deployId\n    uint256 public constant DEPLOY_PREFIX = 2;\n\n    /// @dev Address of IDeBridgeTokenDeployer contract\n    address public deBridgeTokenDeployer;\n    /// @dev Current signature verifier address to verify signatures.\n    address public signatureVerifier;\n    /// @dev Minimal required confirmations in case sent amount is big, have no effect if less than SignatureVerifier.minConfirmations\n    uint8 public excessConfirmations;\n    /// @dev *obsolete flashFeeBps\n    uint256 public gap0;\n    /// @dev outgoing submissions count\n    uint256 public nonce;\n\n    /// @dev Maps debridgeId (see getDebridgeId) => bridge-specific information.\n    mapping(bytes32 => DebridgeInfo) public getDebridge;\n    /// @dev Maps debridgeId (see getDebridgeId) => fee information\n    mapping(bytes32 => DebridgeFeeInfo) public getDebridgeFeeInfo;\n    /// @dev Returns whether the transfer with the submissionId was claimed.\n    /// submissionId is generated in getSubmissionIdFrom\n    mapping(bytes32 => bool) public override isSubmissionUsed;\n    /// @dev Returns whether the transfer with the submissionId is blocked.\n    mapping(bytes32 => bool) public isBlockedSubmission;\n    /// @dev Maps debridgeId (see getDebridgeId) to threshold amount after which\n    /// Math.max(excessConfirmations,SignatureVerifier.minConfirmations) is used instead of\n    /// SignatureVerifier.minConfirmations\n    mapping(bytes32 => uint256) public getAmountThreshold;\n    /// @dev Whether the chain for the asset is supported to send\n    mapping(uint256 => ChainSupportInfo) public getChainToConfig;\n    /// @dev Whether the chain for the asset is supported to claim\n    mapping(uint256 => ChainSupportInfo) public getChainFromConfig;\n    /// @dev Fee discount for address\n    mapping(address => DiscountInfo) public feeDiscount;\n    /// @dev Returns native token info by wrapped token address\n    mapping(address => TokenInfo) public override getNativeInfo;\n\n    /// @dev *obsolete defiController\n    address public gap1;\n    /// @dev Returns proxy to convert the collected fees and transfer to Ethereum network to treasury\n    address public feeProxy;\n    /// @dev Returns address of the proxy to execute user's calls.\n    address public override callProxy;\n    /// @dev Returns contract for wrapped native token.\n    IWETH public weth;\n\n    /// @dev Contract address that can override globalFixedNativeFee\n    address public feeContractUpdater;\n\n    /// @dev Fallback fixed fee in native asset, used if a chain fixed fee is set to 0\n    uint256 public override globalFixedNativeFee;\n    /// @dev Fallback transfer fee in BPS, used if a chain transfer fee is set to 0\n    uint16 public override globalTransferFeeBps;\n\n    /// @dev WethGate contract, that is used for weth withdraws affected by EIP1884\n    IWethGate public wethGate;\n    /// @dev Locker for claim method\n    uint256 public lockedClaim;\n\n    /* ========== ERRORS ========== */\n\n    error FeeProxyBadRole();\n    error FeeContractUpdaterBadRole();\n    error AdminBadRole();\n    error GovMonitoringBadRole();\n    error DebridgeNotFound();\n\n    error WrongChainTo();\n    error WrongChainFrom();\n    error WrongArgument();\n    error WrongAutoArgument();\n\n    error TransferAmountTooHigh();\n\n    error NotSupportedFixedFee();\n    error TransferAmountNotCoverFees();\n    error InvalidTokenToSend();\n\n    error SubmissionUsed();\n    error SubmissionBlocked();\n\n    error AssetAlreadyExist();\n    error ZeroAddress();\n\n    error ProposedFeeTooHigh();\n\n    error NotEnoughReserves();\n    error EthTransferFailed();\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyFeeProxy() {\n        if (feeProxy != msg.sender) revert FeeProxyBadRole();\n        _;\n    }\n\n    modifier onlyFeeContractUpdater() {\n        if (feeContractUpdater != msg.sender) revert FeeContractUpdaterBadRole();\n        _;\n    }\n\n    modifier onlyAdmin() {\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) revert AdminBadRole();\n        _;\n    }\n\n    modifier onlyGovMonitoring() {\n        if (!hasRole(GOVMONITORING_ROLE, msg.sender)) revert GovMonitoringBadRole();\n        _;\n    }\n\n    /* ========== CONSTRUCTOR  ========== */\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {\n    }\n\n    /// @dev Constructor that initializes the most important configurations.\n    /// @param _excessConfirmations minimal required confirmations in case of too many confirmations\n    /// @param _weth wrapped native token contract\n    function initialize(\n        uint8 _excessConfirmations,\n        IWETH _weth\n    ) public initializer {\n        excessConfirmations = _excessConfirmations;\n        weth = _weth;\n\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        __ReentrancyGuard_init();\n    }\n\n    /* ========== send, claim ========== */\n\n    /// @inheritdoc IDeBridgeGate\n    function sendMessage(\n        uint256 _chainIdTo,\n        bytes memory _targetContractAddress,\n        bytes memory _targetContractCalldata\n    ) external payable override returns (bytes32 submissionId) {\n        uint flags = uint(0)\n            .setFlag(Flags.REVERT_IF_EXTERNAL_FAIL, true)\n            .setFlag(Flags.PROXY_WITH_SENDER, true);\n        return sendMessage(_chainIdTo, _targetContractAddress, _targetContractCalldata, flags, 0);\n    }\n\n    /// @inheritdoc IDeBridgeGate\n    function sendMessage(\n        uint256 _chainIdTo,\n        bytes memory _targetContractAddress,\n        bytes memory _targetContractCalldata,\n        uint256 _flags,\n        uint32 _referralCode\n    ) public payable override nonReentrant whenNotPaused\n      returns (bytes32 submissionId) {\n        if (_targetContractAddress.length == 0 || _targetContractCalldata.length == 0) {\n            revert WrongAutoArgument();\n        }\n\n        (uint256 amountAfterFee, bytes32 debridgeId, FeeParams memory feeParams) = _send(\n            \"\", // _permitEnvelope\n            address(0), // _token: we use native currency\n            0, // _amount to be bridged is set to zero because all amount goes to the claimer as the execution fee\n            _chainIdTo,\n            false // useAssetFee\n        );\n\n        SubmissionAutoParamsTo memory autoParams;\n        autoParams.executionFee = _normalizeTokenAmount(address(0), amountAfterFee);\n        autoParams.flags = _flags;\n        autoParams.fallbackAddress = _targetContractAddress;\n        autoParams.data = _targetContractCalldata;\n\n        return _publishSubmission(\n            debridgeId,\n            _chainIdTo,\n            0, // _amount to be bridged is set to zero because all amount goes to the claimer as the execution fee\n            _targetContractAddress,\n            feeParams,\n            _referralCode,\n            autoParams,\n            true // _hasAutoParams\n        );\n    }\n\n    /// @inheritdoc IDeBridgeGate\n    function send(\n        address _tokenAddress,\n        uint256 _amount,\n        uint256 _chainIdTo,\n        bytes memory _receiver,\n        bytes memory _permitEnvelope,\n        bool _useAssetFee,\n        uint32 _referralCode,\n        bytes calldata _autoParams\n    ) external payable override nonReentrant whenNotPaused\n      returns (bytes32 submissionId) {\n        bytes32 debridgeId;\n        FeeParams memory feeParams;\n        uint256 amountAfterFee;\n        // the amount will be reduced by the protocol fee\n        (amountAfterFee, debridgeId, feeParams) = _send(\n            _permitEnvelope,\n            _tokenAddress,\n            _amount,\n            _chainIdTo,\n            _useAssetFee\n        );\n\n        SubmissionAutoParamsTo memory autoParams;\n\n        // Validate Auto Params\n        if (_autoParams.length > 0) {\n            autoParams = abi.decode(_autoParams, (SubmissionAutoParamsTo));\n            autoParams.executionFee = _normalizeTokenAmount(_tokenAddress, autoParams.executionFee);\n            if (autoParams.executionFee > amountAfterFee) {\n                autoParams.executionFee = _normalizeTokenAmount(_tokenAddress, amountAfterFee);\n            }\n            if (autoParams.data.length > 0 && autoParams.fallbackAddress.length == 0 ) revert WrongAutoArgument();\n        }\n\n        amountAfterFee -= autoParams.executionFee;\n\n        // round down amount in order not to bridge dust\n        amountAfterFee = _normalizeTokenAmount(_tokenAddress, amountAfterFee);\n\n        return _publishSubmission(\n            debridgeId,\n            _chainIdTo,\n            amountAfterFee,\n            _receiver,\n            feeParams,\n            _referralCode,\n            autoParams,\n            _autoParams.length > 0\n        );\n    }\n\n    /// @inheritdoc IDeBridgeGate\n    function claim(\n        bytes32 _debridgeId,\n        uint256 _amount,\n        uint256 _chainIdFrom,\n        address _receiver,\n        uint256 _nonce,\n        bytes calldata _signatures,\n        bytes calldata _autoParams\n    ) external override whenNotPaused {\n        if (!getChainFromConfig[_chainIdFrom].isSupported) revert WrongChainFrom();\n\n        SubmissionAutoParamsFrom memory autoParams;\n        if (_autoParams.length > 0) {\n            autoParams = abi.decode(_autoParams, (SubmissionAutoParamsFrom));\n        }\n\n        bytes32 submissionId = getSubmissionIdFrom(\n            _debridgeId,\n            _chainIdFrom,\n            _amount,\n            _receiver,\n            _nonce,\n            autoParams,\n            _autoParams.length > 0,\n            msg.sender\n        );\n\n        // check if submission already claimed\n        if (isSubmissionUsed[submissionId]) revert SubmissionUsed();\n        isSubmissionUsed[submissionId] = true;\n\n        _checkConfirmations(submissionId, _debridgeId, _amount, _signatures);\n\n        bool isNativeToken =_claim(\n            submissionId,\n            _debridgeId,\n            _receiver,\n            _amount,\n            _chainIdFrom,\n            autoParams\n        );\n\n        emit Claimed(\n            submissionId,\n            _debridgeId,\n            _amount,\n            _receiver,\n            _nonce,\n            _chainIdFrom,\n            _autoParams,\n            isNativeToken\n        );\n    }\n\n    /// @dev Deploy a deToken(DeBridgeTokenProxy) for an asset\n    /// @param _nativeTokenAddress A token address on a native chain\n    /// @param _nativeChainId The token native chain's id\n    /// @param _name The token's name\n    /// @param _symbol The token's symbol\n    /// @param _decimals The token's decimals\n    /// @param _signatures Validators' signatures\n    function deployNewAsset(\n        bytes memory _nativeTokenAddress,\n        uint256 _nativeChainId,\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals,\n        bytes memory _signatures\n    ) external nonReentrant whenNotPaused{\n        bytes32 debridgeId = getbDebridgeId(_nativeChainId, _nativeTokenAddress);\n\n        if (getDebridge[debridgeId].exist) revert AssetAlreadyExist();\n\n        bytes32 deployId = getDeployId(debridgeId, _name, _symbol, _decimals);\n\n        // verify signatures\n        ISignatureVerifier(signatureVerifier).submit(deployId, _signatures, excessConfirmations);\n\n        address deBridgeTokenAddress = IDeBridgeTokenDeployer(deBridgeTokenDeployer)\n            .deployAsset(debridgeId, _name, _symbol, _decimals);\n\n        _addAsset(debridgeId, deBridgeTokenAddress, _nativeTokenAddress, _nativeChainId);\n    }\n\n    /// @dev Update native fix fee. Called by our fee update contract\n    /// @param _globalFixedNativeFee  new value\n    function autoUpdateFixedNativeFee(\n        uint256 _globalFixedNativeFee\n    ) external onlyFeeContractUpdater {\n        globalFixedNativeFee = _globalFixedNativeFee;\n        emit FixedNativeFeeAutoUpdated(_globalFixedNativeFee);\n    }\n\n    /* ========== ADMIN ========== */\n\n    /// @dev Update asset's fees.\n    /// @param _chainIds Chain identifiers.\n    /// @param _chainSupportInfo Chain support info.\n    /// @param _isChainFrom is true for editing getChainFromConfig.\n    function updateChainSupport(\n        uint256[] memory _chainIds,\n        ChainSupportInfo[] memory _chainSupportInfo,\n        bool _isChainFrom\n    ) external onlyAdmin {\n        if (_chainIds.length != _chainSupportInfo.length) revert WrongArgument();\n        for (uint256 i = 0; i < _chainIds.length; i++) {\n            if(_isChainFrom){\n                getChainFromConfig[_chainIds[i]] = _chainSupportInfo[i];\n            }\n            else {\n                getChainToConfig[_chainIds[i]] = _chainSupportInfo[i];\n            }\n            emit ChainsSupportUpdated(_chainIds[i], _chainSupportInfo[i], _isChainFrom);\n        }\n    }\n\n    /// @dev Update fallbacks for fixed fee in native asset and transfer fee\n    /// @param _globalFixedNativeFee Fallback fixed fee in native asset, used if a chain fixed fee is set to 0\n    /// @param _globalTransferFeeBps Fallback transfer fee in BPS, used if a chain transfer fee is set to 0\n    function updateGlobalFee(\n        uint256 _globalFixedNativeFee,\n        uint16 _globalTransferFeeBps\n    ) external onlyAdmin {\n        globalFixedNativeFee = _globalFixedNativeFee;\n        globalTransferFeeBps = _globalTransferFeeBps;\n        emit FixedNativeFeeUpdated(_globalFixedNativeFee, _globalTransferFeeBps);\n    }\n\n    /// @dev Update asset's fees.\n    /// @param _debridgeId Asset identifier.\n    /// @param _supportedChainIds Chain identifiers.\n    /// @param _assetFeesInfo Chain support info.\n    function updateAssetFixedFees(\n        bytes32 _debridgeId,\n        uint256[] memory _supportedChainIds,\n        uint256[] memory _assetFeesInfo\n    ) external onlyAdmin {\n        if (_supportedChainIds.length != _assetFeesInfo.length) revert WrongArgument();\n        DebridgeFeeInfo storage debridgeFee = getDebridgeFeeInfo[_debridgeId];\n        for (uint256 i = 0; i < _supportedChainIds.length; i++) {\n            debridgeFee.getChainFee[_supportedChainIds[i]] = _assetFeesInfo[i];\n        }\n    }\n\n    /// @dev Update minimal amount of required signatures, must be > SignatureVerifier.minConfirmations to have an effect\n    /// @param _excessConfirmations Minimal amount of required signatures\n    function updateExcessConfirmations(uint8 _excessConfirmations) external onlyAdmin {\n        if (_excessConfirmations == 0) revert WrongArgument();\n        excessConfirmations = _excessConfirmations;\n    }\n\n    /// @dev Set support for the chains where the token can be transferred.\n    /// @param _chainId Chain id where tokens are sent.\n    /// @param _isSupported Whether the token is transferable to the other chain.\n    /// @param _isChainFrom is true for editing getChainFromConfig.\n    function setChainSupport(uint256 _chainId, bool _isSupported, bool _isChainFrom) external onlyAdmin {\n        if (_isChainFrom) {\n            getChainFromConfig[_chainId].isSupported = _isSupported;\n        }\n        else {\n            getChainToConfig[_chainId].isSupported = _isSupported;\n        }\n        emit ChainSupportUpdated(_chainId, _isSupported, _isChainFrom);\n    }\n\n    /// @dev Set address of the call proxy.\n    /// @param _callProxy Address of the proxy that executes external calls.\n    function setCallProxy(address _callProxy) external onlyAdmin {\n        callProxy = _callProxy;\n        emit CallProxyUpdated(_callProxy);\n    }\n\n    /// @dev Update specific asset's bridge parameters.\n    /// @param _debridgeId Asset identifier.\n    /// @param _maxAmount Maximum amount of current chain token to be wrapped.\n    /// @param _minReservesBps Minimal reserve ration in BPS.\n    /// @param _amountThreshold Threshold amount after which Math.max(excessConfirmations,SignatureVerifier.minConfirmations) is used instead of SignatureVerifier.minConfirmations\n    function updateAsset(\n        bytes32 _debridgeId,\n        uint256 _maxAmount,\n        uint16 _minReservesBps,\n        uint256 _amountThreshold\n    ) external onlyAdmin {\n        if (_minReservesBps > BPS_DENOMINATOR) revert WrongArgument();\n        DebridgeInfo storage debridge = getDebridge[_debridgeId];\n        // don't check existence of debridge - it allows to setup asset before first transfer\n        debridge.maxAmount = _maxAmount;\n        debridge.minReservesBps = _minReservesBps;\n        getAmountThreshold[_debridgeId] = _amountThreshold;\n    }\n\n\n    /// @dev Set signature verifier address.\n    /// @param _verifier Signature verifier address.\n    function setSignatureVerifier(address _verifier) external onlyAdmin {\n        signatureVerifier = _verifier;\n    }\n\n    /// @dev Set asset deployer address.\n    /// @param _deBridgeTokenDeployer Asset deployer address.\n    function setDeBridgeTokenDeployer(address _deBridgeTokenDeployer) external onlyAdmin {\n        deBridgeTokenDeployer = _deBridgeTokenDeployer;\n    }\n\n    /// @dev Set fee contract updater, that can update fix native fee\n    /// @param _value new contract address.\n    function setFeeContractUpdater(address _value) external onlyAdmin {\n        feeContractUpdater = _value;\n    }\n\n    /// @dev Set wethGate contract, that uses for weth withdraws affected by EIP1884\n    /// @param _wethGate address of new wethGate contract.\n    function setWethGate(IWethGate _wethGate) external onlyAdmin {\n        wethGate = _wethGate;\n    }\n\n    /// @dev Stop all transfers.\n    function pause() external onlyGovMonitoring {\n        _pause();\n    }\n\n    /// @dev Allow transfers.\n    function unpause() external onlyAdmin {\n        _unpause();\n    }\n\n    /// @inheritdoc IDeBridgeGate\n    function withdrawFee(bytes32 _debridgeId) external override nonReentrant onlyFeeProxy {\n        DebridgeFeeInfo storage debridgeFee = getDebridgeFeeInfo[_debridgeId];\n        // Amount for transfer to treasury\n        uint256 amount = debridgeFee.collectedFees - debridgeFee.withdrawnFees;\n\n        if (amount == 0) revert NotEnoughReserves();\n\n        debridgeFee.withdrawnFees += amount;\n\n        if (_debridgeId == getDebridgeId(getChainId(), address(0))) {\n            _safeTransferETH(feeProxy, amount);\n        } else {\n            // don't need this check as we check that amount is not zero\n            // if (!getDebridge[_debridgeId].exist) revert DebridgeNotFound();\n            IERC20Upgradeable(getDebridge[_debridgeId].tokenAddress).safeTransfer(feeProxy, amount);\n        }\n        emit WithdrawnFee(_debridgeId, amount);\n    }\n\n    /// @dev Set fee converter proxy.\n    /// @param _feeProxy Fee proxy address.\n    function setFeeProxy(address _feeProxy) external onlyAdmin {\n        feeProxy = _feeProxy;\n    }\n\n    /// @dev Block or unblock a list of submissions\n    /// @param _submissionIds Ids of submissions to block/unblock\n    /// @param isBlocked True to block, false to unblock\n    function blockSubmission(bytes32[] memory _submissionIds, bool isBlocked) external onlyAdmin {\n        for (uint256 i = 0; i < _submissionIds.length; i++) {\n            isBlockedSubmission[_submissionIds[i]] = isBlocked;\n            if (isBlocked) {\n                emit Blocked(_submissionIds[i]);\n            } else {\n                emit Unblocked(_submissionIds[i]);\n            }\n        }\n    }\n\n    /// @dev Update discount.\n    /// @param _address customer address\n    /// @param _discountFixBps  fix discount in BPS\n    /// @param _discountTransferBps transfer % discount in BPS\n    function updateFeeDiscount(\n        address _address,\n        uint16 _discountFixBps,\n        uint16 _discountTransferBps\n    ) external onlyAdmin {\n        if (_address == address(0) ||\n            _discountFixBps > BPS_DENOMINATOR ||\n            _discountTransferBps > BPS_DENOMINATOR\n        ) revert WrongArgument();\n        DiscountInfo storage discountInfo = feeDiscount[_address];\n        discountInfo.discountFixBps = _discountFixBps;\n        discountInfo.discountTransferBps = _discountTransferBps;\n    }\n\n    // we need to accept ETH sends to unwrap WETH\n    receive() external payable {\n        // assert(msg.sender == address(weth)); // only accept ETH via fallback from the WETH contract\n    }\n\n    /* ========== INTERNAL ========== */\n\n    function _checkConfirmations(\n        bytes32 _submissionId,\n        bytes32 _debridgeId,\n        uint256 _amount,\n        bytes calldata _signatures\n    ) internal {\n        if (isBlockedSubmission[_submissionId]) revert SubmissionBlocked();\n        // inside check is confirmed\n        ISignatureVerifier(signatureVerifier).submit(\n            _submissionId,\n            _signatures,\n            _amount >= getAmountThreshold[_debridgeId] ? excessConfirmations : 0\n        );\n    }\n\n    /// @dev Add support for the asset.\n    /// @param _debridgeId Asset identifier.\n    /// @param _tokenAddress Address of the asset on the current chain.\n    /// @param _nativeAddress Address of the asset on the native chain.\n    /// @param _nativeChainId Native chain id.\n    function _addAsset(\n        bytes32 _debridgeId,\n        address _tokenAddress,\n        bytes memory _nativeAddress,\n        uint256 _nativeChainId\n    ) internal {\n        DebridgeInfo storage debridge = getDebridge[_debridgeId];\n\n        if (debridge.exist) revert AssetAlreadyExist();\n        if (_tokenAddress == address(0)) revert ZeroAddress();\n\n        debridge.exist = true;\n        debridge.tokenAddress = _tokenAddress;\n        debridge.chainId = _nativeChainId;\n        // Don't override if the admin already set maxAmount in updateAsset method before\n        if (debridge.maxAmount == 0) {\n            debridge.maxAmount = type(uint256).max;\n        }\n        // set minReservesBps to 100% to prevent using new asset by DeFiController by default\n        debridge.minReservesBps = uint16(BPS_DENOMINATOR);\n        if (getAmountThreshold[_debridgeId] == 0) {\n            getAmountThreshold[_debridgeId] = type(uint256).max;\n        }\n\n        TokenInfo storage tokenInfo = getNativeInfo[_tokenAddress];\n        tokenInfo.nativeChainId = _nativeChainId;\n        tokenInfo.nativeAddress = _nativeAddress;\n\n        emit PairAdded(\n            _debridgeId,\n            _tokenAddress,\n            _nativeAddress,\n            _nativeChainId,\n            debridge.maxAmount,\n            debridge.minReservesBps\n        );\n    }\n\n    /// @dev Locks asset on the chain and enables minting on the other chain.\n    /// @param _amount Amount to be transferred (note: the fee can be applied).\n    /// @param _chainIdTo Chain id of the target chain.\n    /// @param _permitEnvelope Permit for approving the spender by signature. bytes (amount + deadline + signature)\n    function _send(\n        bytes memory _permitEnvelope,\n        address _tokenAddress,\n        uint256 _amount,\n        uint256 _chainIdTo,\n        bool _useAssetFee\n    ) internal returns (\n        uint256 amountAfterFee,\n        bytes32 debridgeId,\n        FeeParams memory feeParams\n    ) {\n        _validateToken(_tokenAddress);\n\n        // Run _permit first. Avoid Stack too deep\n        if (_permitEnvelope.length > 0) {\n            // call permit before transferring token\n            uint256 permitAmount = _permitEnvelope.toUint256(0);\n            uint256 deadline = _permitEnvelope.toUint256(32);\n            (bytes32 r, bytes32 s, uint8 v) = _permitEnvelope.parseSignature(64);\n            IERC20Permit(_tokenAddress).permit(\n                msg.sender,\n                address(this),\n                permitAmount,\n                deadline,\n                v,\n                r,\n                s);\n        }\n\n        TokenInfo memory nativeTokenInfo = getNativeInfo[_tokenAddress];\n        bool isNativeToken = nativeTokenInfo.nativeChainId  == 0\n            ? true // token not in mapping\n            : nativeTokenInfo.nativeChainId == getChainId(); // token native chain id the same\n\n        if (isNativeToken) {\n            //We use WETH debridgeId for transfer ETH\n            debridgeId = getDebridgeId(\n                getChainId(),\n                _tokenAddress == address(0) ? address(weth) : _tokenAddress\n            );\n        }\n        else {\n            debridgeId = getbDebridgeId(\n                nativeTokenInfo.nativeChainId,\n                nativeTokenInfo.nativeAddress\n            );\n        }\n\n        DebridgeInfo storage debridge = getDebridge[debridgeId];\n        if (!debridge.exist) {\n            if (isNativeToken) {\n                // Use WETH as a token address for native tokens\n                address assetAddress = _tokenAddress == address(0) ? address(weth) : _tokenAddress;\n                _addAsset(\n                    debridgeId,\n                    assetAddress,\n                    abi.encodePacked(assetAddress),\n                    getChainId()\n                );\n            } else revert DebridgeNotFound();\n        }\n\n        ChainSupportInfo memory chainFees = getChainToConfig[_chainIdTo];\n        if (!chainFees.isSupported) revert WrongChainTo();\n\n        if (_tokenAddress == address(0)) {\n            // use msg.value as amount for native tokens\n            _amount = msg.value;\n            weth.deposit{value: _amount}();\n            _useAssetFee = true;\n        } else {\n            IERC20Upgradeable token = IERC20Upgradeable(_tokenAddress);\n            uint256 balanceBefore = token.balanceOf(address(this));\n            token.safeTransferFrom(msg.sender, address(this), _amount);\n            // Received real amount\n            _amount = token.balanceOf(address(this)) - balanceBefore;\n        }\n\n        if (_amount > debridge.maxAmount) revert TransferAmountTooHigh();\n\n        //_processFeeForTransfer\n        {\n            DiscountInfo memory discountInfo = feeDiscount[msg.sender];\n            DebridgeFeeInfo storage debridgeFee = getDebridgeFeeInfo[debridgeId];\n\n            // calculate fixed fee\n            uint256 assetsFixedFee;\n            if (_useAssetFee) {\n                if (_tokenAddress == address(0)) {\n                    // collect asset fixed fee (in weth) for native token transfers\n                    assetsFixedFee = chainFees.fixedNativeFee == 0 ? globalFixedNativeFee : chainFees.fixedNativeFee;\n                } else {\n                    // collect asset fixed fee for non native token transfers\n                    assetsFixedFee = debridgeFee.getChainFee[_chainIdTo];\n                    if (assetsFixedFee == 0) revert NotSupportedFixedFee();\n                }\n                // Apply discount for a asset fixed fee\n                assetsFixedFee = _applyDiscount(assetsFixedFee, discountInfo.discountFixBps);\n                if (_amount < assetsFixedFee) revert TransferAmountNotCoverFees();\n                feeParams.fixFee = assetsFixedFee;\n            } else {\n                // collect fixed native fee for non native token transfers\n\n                // use globalFixedNativeFee if value for chain is not set\n                uint256 nativeFee = chainFees.fixedNativeFee == 0 ? globalFixedNativeFee : chainFees.fixedNativeFee;\n                // Apply discount for a native fixed fee\n                nativeFee = _applyDiscount(nativeFee, discountInfo.discountFixBps);\n\n                if (msg.value < nativeFee) revert TransferAmountNotCoverFees();\n                else if (msg.value > nativeFee) {\n                    // refund extra fee eth\n                     _safeTransferETH(msg.sender, msg.value - nativeFee);\n                }\n                bytes32 nativeDebridgeId = getDebridgeId(getChainId(), address(0));\n                getDebridgeFeeInfo[nativeDebridgeId].collectedFees += nativeFee;\n                feeParams.fixFee = nativeFee;\n            }\n\n            // Calculate transfer fee\n            // use globalTransferFeeBps if value for chain is not set\n            uint256 transferFee = (chainFees.transferFeeBps == 0\n                ? globalTransferFeeBps : chainFees.transferFeeBps)\n                * (_amount - assetsFixedFee) / BPS_DENOMINATOR;\n            // apply discount for a transfer fee\n            transferFee = _applyDiscount(transferFee, discountInfo.discountTransferBps);\n\n            uint256 totalFee = transferFee + assetsFixedFee;\n            if (_amount < totalFee) revert TransferAmountNotCoverFees();\n            debridgeFee.collectedFees += totalFee;\n            amountAfterFee = _amount - totalFee;\n\n            // initialize feeParams\n            feeParams.transferFee = transferFee;\n            feeParams.useAssetFee = _useAssetFee;\n            feeParams.receivedAmount = _amount;\n            feeParams.isNativeToken = isNativeToken;\n        }\n\n        if (isNativeToken) {\n            debridge.balance += amountAfterFee;\n        }\n        else {\n            debridge.balance -= amountAfterFee;\n            IDeBridgeToken(debridge.tokenAddress).burn(amountAfterFee);\n        }\n        return (amountAfterFee, debridgeId, feeParams);\n    }\n\n    function _publishSubmission(\n        bytes32 _debridgeId,\n        uint256 _chainIdTo,\n        uint256 _amount,\n        bytes memory _receiver,\n        FeeParams memory feeParams,\n        uint32 _referralCode,\n        SubmissionAutoParamsTo memory autoParams,\n        bool hasAutoParams\n    ) internal returns (bytes32 submissionId) {\n        bytes memory packedSubmission = abi.encodePacked(\n            SUBMISSION_PREFIX,\n            _debridgeId,\n            getChainId(),\n            _chainIdTo,\n            _amount,\n            _receiver,\n            nonce\n        );\n        if (hasAutoParams) {\n            bool isHashedData = autoParams.flags.getFlag(Flags.SEND_HASHED_DATA);\n            if (isHashedData && autoParams.data.length != 32) revert WrongAutoArgument();\n            // auto submission\n            submissionId = keccak256(\n                abi.encodePacked(\n                    packedSubmission,\n                    autoParams.executionFee,\n                    autoParams.flags,\n                    keccak256(autoParams.fallbackAddress),\n                    isHashedData ? autoParams.data : abi.encodePacked(keccak256(autoParams.data)),\n                    keccak256(abi.encodePacked(msg.sender))\n                )\n            );\n        }\n        // regular submission\n        else {\n            submissionId = keccak256(packedSubmission);\n        }\n\n        emit Sent(\n            submissionId,\n            _debridgeId,\n            _amount,\n            _receiver,\n            nonce,\n            _chainIdTo,\n            _referralCode,\n            feeParams,\n            hasAutoParams ? abi.encode(autoParams): bytes(\"\"),\n            msg.sender\n        );\n\n        {\n            emit MonitoringSendEvent(\n                submissionId,\n                nonce,\n                getDebridge[_debridgeId].balance,\n                IERC20Upgradeable(getDebridge[_debridgeId].tokenAddress).totalSupply()\n            );\n        }\n\n        nonce++;\n    }\n\n    function _applyDiscount(\n        uint256 amount,\n        uint16 discountBps\n    ) internal pure returns (uint256) {\n        return amount - amount * discountBps / BPS_DENOMINATOR;\n    }\n\n    function _validateToken(address _token) internal {\n        if (_token == address(0)) {\n            // no validation for native tokens\n            return;\n        }\n\n        // check existence of decimals method\n        (bool success, ) = _token.call(abi.encodeWithSignature(\"decimals()\"));\n        if (!success) revert InvalidTokenToSend();\n\n        // check existence of symbol method\n        (success, ) = _token.call(abi.encodeWithSignature(\"symbol()\"));\n        if (!success) revert InvalidTokenToSend();\n    }\n\n\n    /// @dev Unlock the asset on the current chain and transfer to receiver.\n    /// @param _debridgeId Asset identifier.\n    /// @param _receiver Receiver address.\n    /// @param _amount Amount of the transfered asset (note: the fee can be applyed).\n    function _claim(\n        bytes32 _submissionId,\n        bytes32 _debridgeId,\n        address _receiver,\n        uint256 _amount,\n        uint256 _chainIdFrom,\n        SubmissionAutoParamsFrom memory _autoParams\n    ) internal returns (bool isNativeToken) {\n        DebridgeInfo storage debridge = getDebridge[_debridgeId];\n        if (!debridge.exist) revert DebridgeNotFound();\n        isNativeToken = debridge.chainId == getChainId();\n\n        if (isNativeToken) {\n            debridge.balance -= _amount + _autoParams.executionFee;\n        } else {\n            debridge.balance += _amount + _autoParams.executionFee;\n        }\n\n        address _token = debridge.tokenAddress;\n        bool unwrapETH = isNativeToken\n            && _autoParams.flags.getFlag(Flags.UNWRAP_ETH)\n            && _token == address(weth);\n\n        if (_autoParams.executionFee > 0) {\n            _mintOrTransfer(_token, msg.sender, _autoParams.executionFee, isNativeToken);\n        }\n        if (_autoParams.data.length > 0) {\n            // use local variable to reduce gas usage\n            address _callProxy = callProxy;\n            bool status;\n            if (unwrapETH) {\n                // withdraw weth to callProxy directly\n                _withdrawWeth(_callProxy, _amount);\n                status = ICallProxy(_callProxy).call(\n                    _autoParams.fallbackAddress,\n                    _receiver,\n                    _autoParams.data,\n                    _autoParams.flags,\n                    _autoParams.nativeSender,\n                    _chainIdFrom\n                );\n            }\n            else {\n                _mintOrTransfer(_token, _callProxy, _amount, isNativeToken);\n\n                status = ICallProxy(_callProxy).callERC20(\n                    _token,\n                    _autoParams.fallbackAddress,\n                    _receiver,\n                    _autoParams.data,\n                    _autoParams.flags,\n                    _autoParams.nativeSender,\n                    _chainIdFrom\n                );\n            }\n            emit AutoRequestExecuted(_submissionId, status, _callProxy);\n        } else if (unwrapETH) {\n            // transferring WETH with unwrap flag\n            _withdrawWeth(_receiver, _amount);\n        } else {\n            _mintOrTransfer(_token, _receiver, _amount, isNativeToken);\n        }\n\n        emit MonitoringClaimEvent(\n            _submissionId,\n            debridge.balance,\n            IERC20Upgradeable(debridge.tokenAddress).totalSupply()\n        );\n    }\n\n    function _mintOrTransfer(\n        address _token,\n        address _receiver,\n        uint256 _amount,\n        bool isNativeToken\n    ) internal {\n        if (_amount > 0) {\n            if (isNativeToken) {\n                IERC20Upgradeable(_token).safeTransfer(_receiver, _amount);\n            } else {\n                IDeBridgeToken(_token).mint(_receiver, _amount);\n            }\n        }\n    }\n\n    /*\n    * @dev transfer ETH to an address, revert if it fails.\n    * @param to recipient of the transfer\n    * @param value the amount to send\n    */\n    function _safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        if (!success) revert EthTransferFailed();\n    }\n\n\n    function _withdrawWeth(address _receiver, uint _amount) internal {\n        if (address(wethGate) == address(0)) {\n            // dealing with weth withdraw affected by EIP1884\n            weth.withdraw(_amount);\n            _safeTransferETH(_receiver, _amount);\n        }\n        else {\n            IERC20Upgradeable(address(weth)).safeTransfer(address(wethGate), _amount);\n            wethGate.withdraw(_receiver, _amount);\n        }\n    }\n\n    /*\n    * @dev round down token amount\n    * @param _token address of token, zero for native tokens\n    * @param __amount amount for rounding\n    */\n    function _normalizeTokenAmount(\n        address _token,\n        uint256 _amount\n    ) internal view returns (uint256) {\n        uint256 decimals = _token == address(0)\n            ? 18\n            : IERC20Metadata(_token).decimals();\n        uint256 maxDecimals = 8;\n        if (decimals > maxDecimals) {\n            uint256 multiplier = 10 ** (decimals - maxDecimals);\n            _amount = _amount / multiplier * multiplier;\n        }\n        return _amount;\n    }\n\n    /* VIEW */\n\n    /// @dev Calculates asset identifier.\n    /// @param _chainId Current chain id.\n    /// @param _tokenAddress Address of the asset on the other chain.\n    function getDebridgeId(uint256 _chainId, address _tokenAddress) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_chainId, _tokenAddress));\n    }\n\n    /// @dev Calculates asset identifier.\n    /// @param _chainId Current chain id.\n    /// @param _tokenAddress Address of the asset on the other chain.\n    function getbDebridgeId(uint256 _chainId, bytes memory _tokenAddress) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_chainId, _tokenAddress));\n    }\n\n    /// @inheritdoc IDeBridgeGate\n    function getDebridgeChainAssetFixedFee(\n        bytes32 _debridgeId,\n        uint256 _chainId\n    ) external view override returns (uint256) {\n        // if (!getDebridge[_debridgeId].exist) revert DebridgeNotFound();\n        return getDebridgeFeeInfo[_debridgeId].getChainFee[_chainId];\n    }\n\n    /// @dev Calculate submission id for auto claimable transfer.\n    /// @param _debridgeId Asset identifier.\n    /// @param _chainIdFrom Chain identifier of the chain where tokens are sent from.\n    /// @param _amount Amount of the transferred asset (note: the fee can be applied).\n    /// @param _receiver Receiver address.\n    /// @param _nonce Submission id.\n    /// @param _autoParams Auto params for external call\n    /// @param _hasAutoParams True if auto params are provided\n    /// @param _sender Address that will call claim\n    function getSubmissionIdFrom(\n        bytes32 _debridgeId,\n        uint256 _chainIdFrom,\n        uint256 _amount,\n        address _receiver,\n        uint256 _nonce,\n        SubmissionAutoParamsFrom memory _autoParams,\n        bool _hasAutoParams,\n        address _sender\n    ) public view returns (bytes32) {\n        bytes memory packedSubmission = abi.encodePacked(\n            SUBMISSION_PREFIX,\n            _debridgeId,\n            _chainIdFrom,\n            getChainId(),\n            _amount,\n            _receiver,\n            _nonce\n        );\n        if (_hasAutoParams) {\n            // Needed to let fallback address claim tokens in case user lost call data and can't restore its' hash\n            bool isHashedData = _autoParams.flags.getFlag(Flags.SEND_HASHED_DATA)\n                             && _sender == _autoParams.fallbackAddress\n                             && _autoParams.data.length == 32;\n\n            // auto submission\n            return keccak256(\n                abi.encodePacked(\n                    packedSubmission,\n                    _autoParams.executionFee,\n                    _autoParams.flags,\n                    keccak256(abi.encodePacked(_autoParams.fallbackAddress)),\n                    isHashedData ? _autoParams.data : abi.encodePacked(keccak256(_autoParams.data)),\n                    keccak256(_autoParams.nativeSender)\n                )\n            );\n        }\n        // regular submission\n        return keccak256(packedSubmission);\n    }\n\n\n\n    /// @dev Calculates asset identifier for deployment.\n    /// @param _debridgeId Id of an asset, see getDebridgeId.\n    /// @param _name Asset's name.\n    /// @param _symbol Asset's symbol.\n    /// @param _decimals Asset's decimals.\n    function getDeployId(\n        bytes32 _debridgeId,\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\n            DEPLOY_PREFIX,\n            _debridgeId,\n            keccak256(abi.encodePacked(_name)),\n            keccak256(abi.encodePacked(_symbol)),\n            _decimals));\n    }\n\n    /// @dev Get current chain id\n    function getChainId() public view virtual returns (uint256 cid) {\n        assembly {\n            cid := chainid()\n        }\n    }\n\n    // ============ Version Control ============\n    /// @dev Get this contract's version\n    function version() external pure returns (uint256) {\n        return 421; // 4.2.1\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal initializer {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/interfaces/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "contracts/interfaces/IDeBridgeToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"../interfaces/IERC20Permit.sol\";\n\ninterface IDeBridgeToken is IERC20Upgradeable, IERC20Permit {\n    /// @dev Issues new tokens.\n    /// @param _receiver Token's receiver.\n    /// @param _amount Amount to be minted.\n    function mint(address _receiver, uint256 _amount) external;\n\n    /// @dev Destroys existing tokens.\n    /// @param _amount Amount to be burnt.\n    function burn(uint256 _amount) external;\n}\n"
    },
    "contracts/interfaces/IDeBridgeTokenDeployer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IDeBridgeTokenDeployer {\n\n    /// @dev Deploy a deToken(DeBridgeTokenProxy) for an asset\n    /// @param _debridgeId Asset id, see DeBridgeGate.getDebridgeId\n    /// @param _name The asset's name\n    /// @param _symbol The asset's symbol\n    /// @param _decimals The asset's decimals\n    function deployAsset(\n        bytes32 _debridgeId,\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) external returns (address deTokenAddress);\n\n    /// @dev Emitted when a deToken(DeBridgeTokenProxy) is deployed using this contract\n    event DeBridgeTokenDeployed(\n        address asset,\n        string name,\n        string symbol,\n        uint8 decimals\n    );\n}"
    },
    "contracts/interfaces/ISignatureVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface ISignatureVerifier {\n\n    /* ========== EVENTS ========== */\n\n    /// @dev Emitted once the submission is confirmed by one oracle.\n    event Confirmed(bytes32 submissionId, address operator);\n    /// @dev Emitted once the submission is confirmed by min required amount of oracles.\n    event DeployConfirmed(bytes32 deployId, address operator);\n\n    /* ========== FUNCTIONS ========== */\n\n    /// @dev Check confirmation (validate signatures) for the transfer request.\n    /// @param _submissionId Submission identifier.\n    /// @param _signatures Array of signatures by oracles.\n    /// @param _excessConfirmations override min confirmations count\n    function submit(\n        bytes32 _submissionId,\n        bytes memory _signatures,\n        uint8 _excessConfirmations\n    ) external;\n\n}"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/interfaces/IDeBridgeGate.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IDeBridgeGate {\n    /* ========== STRUCTS ========== */\n\n    struct TokenInfo {\n        uint256 nativeChainId;\n        bytes nativeAddress;\n    }\n\n    struct DebridgeInfo {\n        uint256 chainId; // native chain id\n        uint256 maxAmount; // maximum amount to transfer\n        uint256 balance; // total locked assets\n        uint256 lockedInStrategies; // total locked assets in strategy (AAVE, Compound, etc)\n        address tokenAddress; // asset address on the current chain\n        uint16 minReservesBps; // minimal hot reserves in basis points (1/10000)\n        bool exist;\n    }\n\n    struct DebridgeFeeInfo {\n        uint256 collectedFees; // total collected fees\n        uint256 withdrawnFees; // fees that already withdrawn\n        mapping(uint256 => uint256) getChainFee; // whether the chain for the asset is supported\n    }\n\n    struct ChainSupportInfo {\n        uint256 fixedNativeFee; // transfer fixed fee\n        bool isSupported; // whether the chain for the asset is supported\n        uint16 transferFeeBps; // transfer fee rate nominated in basis points (1/10000) of transferred amount\n    }\n\n    struct DiscountInfo {\n        uint16 discountFixBps; // fix discount in BPS\n        uint16 discountTransferBps; // transfer % discount in BPS\n    }\n\n    /// @param executionFee Fee paid to the transaction executor.\n    /// @param fallbackAddress Receiver of the tokens if the call fails.\n    struct SubmissionAutoParamsTo {\n        uint256 executionFee;\n        uint256 flags;\n        bytes fallbackAddress;\n        bytes data;\n    }\n\n    /// @param executionFee Fee paid to the transaction executor.\n    /// @param fallbackAddress Receiver of the tokens if the call fails.\n    struct SubmissionAutoParamsFrom {\n        uint256 executionFee;\n        uint256 flags;\n        address fallbackAddress;\n        bytes data;\n        bytes nativeSender;\n    }\n\n    struct FeeParams {\n        uint256 receivedAmount;\n        uint256 fixFee;\n        uint256 transferFee;\n        bool useAssetFee;\n        bool isNativeToken;\n    }\n\n    /* ========== PUBLIC VARS GETTERS ========== */\n\n    /// @dev Returns whether the transfer with the submissionId was claimed.\n    /// submissionId is generated in getSubmissionIdFrom\n    function isSubmissionUsed(bytes32 submissionId) view external returns (bool);\n\n    /// @dev Returns native token info by wrapped token address\n    function getNativeInfo(address token) view external returns (\n        uint256 nativeChainId,\n        bytes memory nativeAddress);\n\n    /// @dev Returns address of the proxy to execute user's calls.\n    function callProxy() external view returns (address);\n\n    /// @dev Fallback fixed fee in native asset, used if a chain fixed fee is set to 0\n    function globalFixedNativeFee() external view returns (uint256);\n\n    /// @dev Fallback transfer fee in BPS, used if a chain transfer fee is set to 0\n    function globalTransferFeeBps() external view returns (uint16);\n\n    /* ========== FUNCTIONS ========== */\n\n    /// @dev Submits the message to the deBridge infrastructure to be broadcasted to another supported blockchain (identified by _dstChainId)\n    ///      with the instructions to call the _targetContractAddress contract using the given _targetContractCalldata\n    /// @notice NO ASSETS ARE BROADCASTED ALONG WITH THIS MESSAGE\n    /// @notice DeBridgeGate only accepts submissions with msg.value (native ether) covering a small protocol fee\n    ///         (defined in the globalFixedNativeFee property). Any excess amount of ether passed to this function is\n    ///         included in the message as the execution fee - the amount deBridgeGate would give as an incentive to\n    ///         a third party in return for successful claim transaction execution on the destination chain.\n    /// @notice DeBridgeGate accepts a set of flags that control the behaviour of the execution. This simple method\n    ///         sets the default set of flags: REVERT_IF_EXTERNAL_FAIL, PROXY_WITH_SENDER\n    /// @param _dstChainId ID of the destination chain.\n    /// @param _targetContractAddress A contract address to be called on the destination chain\n    /// @param _targetContractCalldata Calldata to execute against the target contract on the destination chain\n    function sendMessage(\n        uint256 _dstChainId,\n        bytes memory _targetContractAddress,\n        bytes memory _targetContractCalldata\n    ) external payable returns (bytes32 submissionId);\n\n    /// @dev Submits the message to the deBridge infrastructure to be broadcasted to another supported blockchain (identified by _dstChainId)\n    ///      with the instructions to call the _targetContractAddress contract using the given _targetContractCalldata\n    /// @notice NO ASSETS ARE BROADCASTED ALONG WITH THIS MESSAGE\n    /// @notice DeBridgeGate only accepts submissions with msg.value (native ether) covering a small protocol fee\n    ///         (defined in the globalFixedNativeFee property). Any excess amount of ether passed to this function is\n    ///         included in the message as the execution fee - the amount deBridgeGate would give as an incentive to\n    ///         a third party in return for successful claim transaction execution on the destination chain.\n    /// @notice DeBridgeGate accepts a set of flags that control the behaviour of the execution. This simple method\n    ///         sets the default set of flags: REVERT_IF_EXTERNAL_FAIL, PROXY_WITH_SENDER\n    /// @param _dstChainId ID of the destination chain.\n    /// @param _targetContractAddress A contract address to be called on the destination chain\n    /// @param _targetContractCalldata Calldata to execute against the target contract on the destination chain\n    /// @param _flags A bitmask of toggles listed in the Flags library\n    /// @param _referralCode Referral code to identify this submission\n    function sendMessage(\n        uint256 _dstChainId,\n        bytes memory _targetContractAddress,\n        bytes memory _targetContractCalldata,\n        uint256 _flags,\n        uint32 _referralCode\n    ) external payable returns (bytes32 submissionId);\n\n    /// @dev This method is used for the transfer of assets [from the native chain](https://docs.debridge.finance/the-core-protocol/transfers#transfer-from-native-chain).\n    /// It locks an asset in the smart contract in the native chain and enables minting of deAsset on the secondary chain.\n    /// @param _tokenAddress Asset identifier.\n    /// @param _amount Amount to be transferred (note: the fee can be applied).\n    /// @param _chainIdTo Chain id of the target chain.\n    /// @param _receiver Receiver address.\n    /// @param _permitEnvelope Permit for approving the spender by signature. bytes (amount + deadline + signature)\n    /// @param _useAssetFee use assets fee for pay protocol fix (work only for specials token)\n    /// @param _referralCode Referral code\n    /// @param _autoParams Auto params for external call in target network\n    function send(\n        address _tokenAddress,\n        uint256 _amount,\n        uint256 _chainIdTo,\n        bytes memory _receiver,\n        bytes memory _permitEnvelope,\n        bool _useAssetFee,\n        uint32 _referralCode,\n        bytes calldata _autoParams\n    ) external payable returns (bytes32 submissionId) ;\n\n    /// @dev Is used for transfers [into the native chain](https://docs.debridge.finance/the-core-protocol/transfers#transfer-from-secondary-chain-to-native-chain)\n    /// to unlock the designated amount of asset from collateral and transfer it to the receiver.\n    /// @param _debridgeId Asset identifier.\n    /// @param _amount Amount of the transferred asset (note: the fee can be applied).\n    /// @param _chainIdFrom Chain where submission was sent\n    /// @param _receiver Receiver address.\n    /// @param _nonce Submission id.\n    /// @param _signatures Validators signatures to confirm\n    /// @param _autoParams Auto params for external call\n    function claim(\n        bytes32 _debridgeId,\n        uint256 _amount,\n        uint256 _chainIdFrom,\n        address _receiver,\n        uint256 _nonce,\n        bytes calldata _signatures,\n        bytes calldata _autoParams\n    ) external;\n\n    /// @dev Withdraw collected fees to feeProxy\n    /// @param _debridgeId Asset identifier.\n    function withdrawFee(bytes32 _debridgeId) external;\n\n    /// @dev Returns asset fixed fee value for specified debridge and chainId.\n    /// @param _debridgeId Asset identifier.\n    /// @param _chainId Chain id.\n    function getDebridgeChainAssetFixedFee(\n        bytes32 _debridgeId,\n        uint256 _chainId\n    ) external view returns (uint256);\n\n    /* ========== EVENTS ========== */\n\n    /// @dev Emitted once the tokens are sent from the original(native) chain to the other chain; the transfer tokens\n    /// are expected to be claimed by the users.\n    event Sent(\n        bytes32 submissionId,\n        bytes32 indexed debridgeId,\n        uint256 amount,\n        bytes receiver,\n        uint256 nonce,\n        uint256 indexed chainIdTo,\n        uint32 referralCode,\n        FeeParams feeParams,\n        bytes autoParams,\n        address nativeSender\n        // bool isNativeToken //added to feeParams\n    );\n\n    /// @dev Emitted once the tokens are transferred and withdrawn on a target chain\n    event Claimed(\n        bytes32 submissionId,\n        bytes32 indexed debridgeId,\n        uint256 amount,\n        address indexed receiver,\n        uint256 nonce,\n        uint256 indexed chainIdFrom,\n        bytes autoParams,\n        bool isNativeToken\n    );\n\n    /// @dev Emitted when new asset support is added.\n    event PairAdded(\n        bytes32 debridgeId,\n        address tokenAddress,\n        bytes nativeAddress,\n        uint256 indexed nativeChainId,\n        uint256 maxAmount,\n        uint16 minReservesBps\n    );\n\n    event MonitoringSendEvent(\n        bytes32 submissionId,\n        uint256 nonce,\n        uint256 lockedOrMintedAmount,\n        uint256 totalSupply\n    );\n\n    event MonitoringClaimEvent(\n        bytes32 submissionId,\n        uint256 lockedOrMintedAmount,\n        uint256 totalSupply\n    );\n\n    /// @dev Emitted when the asset is allowed/disallowed to be transferred to the chain.\n    event ChainSupportUpdated(uint256 chainId, bool isSupported, bool isChainFrom);\n    /// @dev Emitted when the supported chains are updated.\n    event ChainsSupportUpdated(\n        uint256 chainIds,\n        ChainSupportInfo chainSupportInfo,\n        bool isChainFrom);\n\n    /// @dev Emitted when the new call proxy is set.\n    event CallProxyUpdated(address callProxy);\n    /// @dev Emitted when the transfer request is executed.\n    event AutoRequestExecuted(\n        bytes32 submissionId,\n        bool indexed success,\n        address callProxy\n    );\n\n    /// @dev Emitted when a submission is blocked.\n    event Blocked(bytes32 submissionId);\n    /// @dev Emitted when a submission is unblocked.\n    event Unblocked(bytes32 submissionId);\n\n    /// @dev Emitted when fee is withdrawn.\n    event WithdrawnFee(bytes32 debridgeId, uint256 fee);\n\n    /// @dev Emitted when globalFixedNativeFee and globalTransferFeeBps are updated.\n    event FixedNativeFeeUpdated(\n        uint256 globalFixedNativeFee,\n        uint256 globalTransferFeeBps);\n\n    /// @dev Emitted when globalFixedNativeFee is updated by feeContractUpdater\n    event FixedNativeFeeAutoUpdated(uint256 globalFixedNativeFee);\n}\n"
    },
    "contracts/libraries/SignatureUtil.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.7;\n\nlibrary SignatureUtil {\n    /* ========== ERRORS ========== */\n\n    error WrongArgumentLength();\n    error SignatureInvalidLength();\n    error SignatureInvalidV();\n\n    /// @dev Prepares raw msg that was signed by the oracle.\n    /// @param _submissionId Submission identifier.\n    function getUnsignedMsg(bytes32 _submissionId) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _submissionId));\n    }\n\n    /// @dev Splits signature bytes to r,s,v components.\n    /// @param _signature Signature bytes in format r+s+v.\n    function splitSignature(bytes memory _signature)\n        internal\n        pure\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        if (_signature.length != 65) revert SignatureInvalidLength();\n        return parseSignature(_signature, 0);\n    }\n\n    function parseSignature(bytes memory _signatures, uint256 offset)\n        internal\n        pure\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        assembly {\n            r := mload(add(_signatures, add(32, offset)))\n            s := mload(add(_signatures, add(64, offset)))\n            v := and(mload(add(_signatures, add(65, offset))), 0xff)\n        }\n\n        if (v < 27) v += 27;\n        if (v != 27 && v != 28) revert SignatureInvalidV();\n    }\n\n    function toUint256(bytes memory _bytes, uint256 _offset)\n        internal\n        pure\n        returns (uint256 result)\n    {\n        if (_bytes.length < _offset + 32) revert WrongArgumentLength();\n\n        assembly {\n            result := mload(add(add(_bytes, 0x20), _offset))\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IWethGate.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.7;\n\ninterface IWethGate {\n    /// @dev Transfer assets to a receiver.\n    /// @param receiver This address will receive a transfer.\n    /// @param wad Amount in wei\n    function withdraw(address receiver, uint wad) external;\n}"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/periphery/FeesCalculator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\n\nimport \"../transfers/DeBridgeGate.sol\";\n\ncontract FeesCalculator is\n    Initializable,\n    AccessControlUpgradeable\n{\n    /* ========== STATE VARIABLES ========== */\n\n    // Basis points or bps equal to 1/10000\n    // used to express relative values (fees)\n    uint256 public constant BPS_DENOMINATOR = 10000;\n\n    DeBridgeGate public gate; // debridge gate address\n\n    /* ========== ERRORS ========== */\n\n    error AdminBadRole();\n\n    /* ========== STRUCTURES ========== */\n\n    struct SubmissionFees {\n        uint256 amountAfterFee;\n        uint256 fixFee;\n        uint256 transferFee;\n        bool useAssetFee;\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyAdmin() {\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) revert AdminBadRole();\n        _;\n    }\n\n    /* ========== CONSTRUCTOR  ========== */\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {\n    }\n\n    function initialize(\n        DeBridgeGate _gate\n    ) public initializer {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        gate = _gate;\n    }\n\n    // ============ VIEWS ============\n\n    function getTransferFees(\n        address _tokenAddress,\n        uint256 _amount,\n        uint256 _chainIdTo,\n        address _sender,\n        bool _useAssetFee,\n        uint256 _executionFee\n    ) external view returns (SubmissionFees memory feeInfo) {\n        // override useAssetFee for native tokens\n        feeInfo.useAssetFee = _tokenAddress == address(0) ? true : _useAssetFee;\n\n        // 1. protocol fee\n        (feeInfo.fixFee, feeInfo.transferFee) = _calculateProtocolFees(\n            _tokenAddress,\n            _amount,\n            _chainIdTo,\n            _sender,\n            feeInfo.useAssetFee\n        );\n\n        feeInfo.amountAfterFee = _amount - feeInfo.transferFee;\n        if (feeInfo.useAssetFee) {\n            feeInfo.amountAfterFee -= feeInfo.fixFee;\n        }\n\n        // 2. normalization execution fee - round down amount in order not to bridge dust\n        _executionFee = _normalizeTokenAmount(_tokenAddress, _executionFee);\n\n        // 3. execution fee\n        feeInfo.amountAfterFee -= _executionFee;\n\n        // 4. normalization - round down amount in order not to bridge dust\n        feeInfo.amountAfterFee = _normalizeTokenAmount(_tokenAddress, feeInfo.amountAfterFee);\n\n        return feeInfo;\n    }\n\n    /* ========== ADMIN ========== */\n\n    function setDeBridgeGate(DeBridgeGate _gate) external onlyAdmin {\n        gate = _gate;\n    }\n\n    /* ========== INTERNAL ========== */\n\n    function getDebridgeId(\n        address _tokenAddress\n    ) internal view returns (bytes32 debridgeId) {\n        (uint256 nativeChainId, bytes memory nativeAddress) = gate.getNativeInfo(_tokenAddress);\n\n        bool isNativeToken = nativeChainId  == 0\n            ? true // token not in mapping\n            : nativeChainId == gate.getChainId(); // token native chain id the same\n\n        if (isNativeToken) {\n            //We use WETH debridgeId for transfer ETH\n            debridgeId = gate.getDebridgeId(\n                gate.getChainId(),\n                _tokenAddress == address(0) ? address(gate.weth()) : _tokenAddress\n            );\n        } else {\n            debridgeId = gate.getbDebridgeId(\n                nativeChainId,\n                nativeAddress\n            );\n        }\n        return debridgeId;\n    }\n\n    function _calculateProtocolFees(\n        address _tokenAddress,\n        uint256 _amount,\n        uint256 _chainIdTo,\n        address _sender,\n        bool _useAssetFee\n    ) internal view returns (\n        uint256 fixFee,\n        uint256 transferFee\n    ) {\n        (\n            uint256 chainFixedNativeFee,\n            bool chainIsSupported,\n            uint16 chainTransferFeeBps\n        ) = gate.getChainToConfig(_chainIdTo);\n        if (!chainIsSupported) revert DeBridgeGate.WrongChainTo();\n\n        (uint16 discountFixBps, uint16 discountTransferBps) = gate.feeDiscount(_sender);\n\n        // calculate fixed fee\n        // use native fixed fees calculation for native tokens despite overwriting _useAssetFee\n        if (_useAssetFee) {\n            if (_tokenAddress == address(0)) {\n                fixFee = chainFixedNativeFee == 0 ? gate.globalFixedNativeFee() : chainFixedNativeFee;\n            }\n            else {\n                // calculate fixed asset fee for ERC20 tokens\n                bytes32 debridgeId = getDebridgeId(_tokenAddress);\n                fixFee = gate.getDebridgeChainAssetFixedFee(debridgeId, _chainIdTo);\n                if (fixFee == 0) revert DeBridgeGate.NotSupportedFixedFee();\n            }\n        } else {\n            // calculate native asset fee\n            // use globalFixedNativeFee if value for chain is not setted\n            fixFee = chainFixedNativeFee == 0 ? gate.globalFixedNativeFee() : chainFixedNativeFee;\n        }\n        // Apply discount for a fixed fee\n        fixFee -= fixFee * discountFixBps / BPS_DENOMINATOR;\n        uint256 assetsFixedFee = _useAssetFee ? fixFee: 0;\n\n        // Calculate transfer fee\n        if (chainTransferFeeBps == 0) {\n            // use globalTransferFeeBps if value for chain is not setted\n            chainTransferFeeBps = gate.globalTransferFeeBps();\n        }\n        transferFee = (_amount - assetsFixedFee) * chainTransferFeeBps / BPS_DENOMINATOR;\n        // apply discount for a transfer fee\n        transferFee -= transferFee * discountTransferBps / BPS_DENOMINATOR;\n\n        return (fixFee, transferFee);\n    }\n\n    /*\n    * @dev round down token amount\n    * @param _token address of token, zero for native tokens\n    * @param __amount amount for rounding\n    */\n    function _normalizeTokenAmount(\n        address _token,\n        uint256 _amount\n    ) internal view returns (uint256) {\n        uint256 decimals = _token == address(0)\n            ? 18\n            : IERC20MetadataUpgradeable(_token).decimals();\n        uint256 maxDecimals = 8;\n        if (decimals > maxDecimals) {\n            uint256 multiplier = 10 ** (decimals - maxDecimals);\n            _amount = _amount / multiplier * multiplier;\n        }\n        return _amount;\n    }\n\n    // ============ Version Control ============\n    function version() external pure returns (uint256) {\n        return 103; // 1.0.3\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (interfaces/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\n"
    },
    "contracts/transfers/OraclesManager.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"../interfaces/IOraclesManager.sol\";\n\n/// @dev The base contract for oracles management. Allows adding/removing oracles,\n/// managing the minimal required amount of confirmations.\ncontract OraclesManager is Initializable, AccessControlUpgradeable, IOraclesManager {\n    /* ========== STATE VARIABLES ========== */\n\n    /// @dev Minimal required confirmations\n    uint8 public minConfirmations;\n    /// @dev Minimal required confirmations in case of too many confirmations\n    uint8 public excessConfirmations;\n    /// @dev Count of required oracles\n    uint8 public requiredOraclesCount;\n    /// @dev Oracle addresses\n    address[] public oracleAddresses;\n    /// @dev Maps an oracle address to the oracle details\n    mapping(address => OracleInfo) public getOracleInfo;\n\n    /* ========== ERRORS ========== */\n\n    error AdminBadRole();\n    error OracleBadRole();\n\n    error OracleAlreadyExist();\n    error OracleNotFound();\n\n    error WrongArgument();\n    error LowMinConfirmations();\n\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyAdmin() {\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) revert AdminBadRole();\n        _;\n    }\n    modifier onlyOracle() {\n        if (!getOracleInfo[msg.sender].isValid) revert OracleBadRole();\n        _;\n    }\n\n    /* ========== CONSTRUCTOR  ========== */\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {\n    }\n    \n    /// @dev Constructor that initializes the most important configurations.\n    /// @param _minConfirmations Minimal required confirmations.\n    /// @param _excessConfirmations Minimal required confirmations in case of too many confirmations.\n    function initialize(uint8 _minConfirmations, uint8 _excessConfirmations) internal {\n        if (_minConfirmations == 0 || _excessConfirmations < _minConfirmations) revert LowMinConfirmations();\n        minConfirmations = _minConfirmations;\n        excessConfirmations = _excessConfirmations;\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    /* ========== ADMIN ========== */\n\n    /// @dev Sets minimal required confirmations.\n    /// @param _minConfirmations Minimal required confirmations.\n    function setMinConfirmations(uint8 _minConfirmations) external onlyAdmin {\n        if (_minConfirmations < oracleAddresses.length / 2 + 1) revert LowMinConfirmations();\n        minConfirmations = _minConfirmations;\n    }\n\n    /// @dev Sets minimal required confirmations in case of too many confirmations.\n    /// @param _excessConfirmations Minimal required confirmations in case of too many confirmations.\n    function setExcessConfirmations(uint8 _excessConfirmations) external onlyAdmin {\n        if (_excessConfirmations < minConfirmations) revert LowMinConfirmations();\n        excessConfirmations = _excessConfirmations;\n    }\n\n    /// @dev Add oracles.\n    /// @param _oracles Oracles' addresses.\n    /// @param _required A transfer will not be confirmed without oracles having required set to true,\n    function addOracles(\n        address[] memory _oracles,\n        bool[] memory _required\n    ) external onlyAdmin {\n        if (_oracles.length != _required.length) revert WrongArgument();\n        if (minConfirmations < (oracleAddresses.length +  _oracles.length) / 2 + 1) revert LowMinConfirmations();\n\n        for (uint256 i = 0; i < _oracles.length; i++) {\n            OracleInfo storage oracleInfo = getOracleInfo[_oracles[i]];\n            if (oracleInfo.exist) revert OracleAlreadyExist();\n\n            oracleAddresses.push(_oracles[i]);\n\n            if (_required[i]) {\n                requiredOraclesCount += 1;\n            }\n\n            oracleInfo.exist = true;\n            oracleInfo.isValid = true;\n            oracleInfo.required = _required[i];\n\n            emit AddOracle(_oracles[i], _required[i]);\n        }\n    }\n\n    /// @dev Update an oracle.\n    /// @param _oracle An oracle address.\n    /// @param _isValid Is this oracle valid, i.e. should it be treated as an oracle.\n    /// @param _required If set to true a transfer will not be confirmed without this oracle.\n    function updateOracle(\n        address _oracle,\n        bool _isValid,\n        bool _required\n    ) external onlyAdmin {\n        //If oracle is invalid, it must be not required\n        if (!_isValid && _required) revert WrongArgument();\n\n        OracleInfo storage oracleInfo = getOracleInfo[_oracle];\n        if (!oracleInfo.exist) revert OracleNotFound();\n\n        if (oracleInfo.required && !_required) {\n            requiredOraclesCount -= 1;\n        } else if (!oracleInfo.required && _required) {\n            requiredOraclesCount += 1;\n        }\n        if (oracleInfo.isValid && !_isValid) {\n            // remove oracle from oracleAddresses array without keeping an order\n            for (uint256 i = 0; i < oracleAddresses.length; i++) {\n                if (oracleAddresses[i] == _oracle) {\n                    oracleAddresses[i] = oracleAddresses[oracleAddresses.length - 1];\n                    oracleAddresses.pop();\n                    break;\n                }\n            }\n        } else if (!oracleInfo.isValid && _isValid) {\n            if (minConfirmations < (oracleAddresses.length + 1) / 2 + 1) revert LowMinConfirmations();\n            oracleAddresses.push(_oracle);\n        }\n        oracleInfo.isValid = _isValid;\n        oracleInfo.required = _required;\n        emit UpdateOracle(_oracle, _required, _isValid);\n    }\n}\n"
    },
    "contracts/interfaces/IOraclesManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IOraclesManager {\n    /* ========== STRUCTS ========== */\n\n    struct OracleInfo {\n        bool exist; // exist oracle\n        bool isValid; // is valid oracle\n        bool required; // without this oracle (DSRM), the transfer will not be confirmed\n    }\n\n    /* ========== EVENTS ========== */\n    /// @dev Emitted when an oracle is added\n    /// @param oracle Address of an added oracle\n    /// @param required Is this oracle's signature required for every transfer\n    event AddOracle(address oracle, bool required);\n    /// @dev Emitted when an oracle is updated\n    /// @param oracle Address of an updated oracle\n    /// @param required Is this oracle's signature required for every transfer\n    /// @param isValid Is this oracle valid, i.e. should it be treated as an oracle\n    event UpdateOracle(address oracle, bool required, bool isValid);\n    /// @dev Emitted once the submission is confirmed by min required amount of oracles\n    event DeployApproved(bytes32 deployId);\n    /// @dev Emitted once the submission is confirmed by min required amount of oracles\n    event SubmissionApproved(bytes32 submissionId);\n}\n"
    },
    "contracts/transfers/SignatureVerifier.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.7;\n\nimport \"./OraclesManager.sol\";\nimport \"../interfaces/ISignatureVerifier.sol\";\nimport \"../libraries/SignatureUtil.sol\";\n\n/// @dev It's used to verify that a transfer is signed by oracles.\ncontract SignatureVerifier is OraclesManager, ISignatureVerifier {\n    using SignatureUtil for bytes;\n    using SignatureUtil for bytes32;\n\n    /* ========== STATE VARIABLES ========== */\n    /// @dev Number of required confirmations per block after the extra check is enabled\n    uint8 public confirmationThreshold;\n    /// @dev submissions count in current block\n    uint40 public submissionsInBlock;\n    /// @dev Current block\n    uint40 public currentBlock;\n\n    /// @dev Debridge gate address\n    address public debridgeAddress;\n\n    /* ========== ERRORS ========== */\n\n    error DeBridgeGateBadRole();\n    error NotConfirmedByRequiredOracles();\n    error NotConfirmedThreshold();\n    error SubmissionNotConfirmed();\n    error DuplicateSignatures();\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyDeBridgeGate() {\n        if (msg.sender != debridgeAddress) revert DeBridgeGateBadRole();\n        _;\n    }\n\n    /* ========== CONSTRUCTOR  ========== */\n\n    /// @dev Constructor that initializes the most important configurations.\n    /// @param _minConfirmations Common confirmations count.\n    /// @param _confirmationThreshold Confirmations per block after the extra check is enabled.\n    /// @param _excessConfirmations Confirmations count in case of excess activity.\n    function initialize(\n        uint8 _minConfirmations,\n        uint8 _confirmationThreshold,\n        uint8 _excessConfirmations,\n        address _debridgeAddress\n    ) public initializer {\n        OraclesManager.initialize(_minConfirmations, _excessConfirmations);\n        confirmationThreshold = _confirmationThreshold;\n        debridgeAddress = _debridgeAddress;\n    }\n\n\n    /// @inheritdoc ISignatureVerifier\n    function submit(\n        bytes32 _submissionId,\n        bytes memory _signatures,\n        uint8 _excessConfirmations\n    ) external override onlyDeBridgeGate {\n        //Need confirmation to confirm submission\n        uint8 needConfirmations = _excessConfirmations > minConfirmations\n            ? _excessConfirmations\n            : minConfirmations;\n        // Count of required(DSRM) oracles confirmation\n        uint256 currentRequiredOraclesCount;\n        // stack variable to aggregate confirmations and write to storage once\n        uint8 confirmations;\n        uint256 signaturesCount = _countSignatures(_signatures);\n        address[] memory validators = new address[](signaturesCount);\n        for (uint256 i = 0; i < signaturesCount; i++) {\n            (bytes32 r, bytes32 s, uint8 v) = _signatures.parseSignature(i * 65);\n            address oracle = ecrecover(_submissionId.getUnsignedMsg(), v, r, s);\n            if (getOracleInfo[oracle].isValid) {\n                for (uint256 k = 0; k < i; k++) {\n                    if (validators[k] == oracle) revert DuplicateSignatures();\n                }\n                validators[i] = oracle;\n\n                confirmations += 1;\n                emit Confirmed(_submissionId, oracle);\n                if (getOracleInfo[oracle].required) {\n                    currentRequiredOraclesCount += 1;\n                }\n                if (\n                    confirmations >= needConfirmations &&\n                    currentRequiredOraclesCount >= requiredOraclesCount\n                ) {\n                    break;\n                }\n            }\n        }\n\n        if (currentRequiredOraclesCount != requiredOraclesCount)\n            revert NotConfirmedByRequiredOracles();\n\n        if (confirmations >= minConfirmations) {\n            if (currentBlock == uint40(block.number)) {\n                submissionsInBlock += 1;\n            } else {\n                currentBlock = uint40(block.number);\n                submissionsInBlock = 1;\n            }\n            emit SubmissionApproved(_submissionId);\n        }\n\n        if (submissionsInBlock > confirmationThreshold) {\n            if (confirmations < excessConfirmations) revert NotConfirmedThreshold();\n        }\n\n        if (confirmations < needConfirmations) revert SubmissionNotConfirmed();\n    }\n\n    /* ========== ADMIN ========== */\n\n    /// @dev Sets minimal required confirmations.\n    /// @param _confirmationThreshold Confirmation info.\n    function setThreshold(uint8 _confirmationThreshold) external onlyAdmin {\n        if (_confirmationThreshold == 0) revert WrongArgument();\n        confirmationThreshold = _confirmationThreshold;\n    }\n\n    /// @dev Sets core debridge conrtact address.\n    /// @param _debridgeAddress Debridge address.\n    function setDebridgeAddress(address _debridgeAddress) external onlyAdmin {\n        debridgeAddress = _debridgeAddress;\n    }\n\n    /* ========== VIEW ========== */\n\n    /// @dev Check is valid signature\n    /// @param _submissionId Submission identifier.\n    /// @param _signature signature by oracle.\n    function isValidSignature(bytes32 _submissionId, bytes memory _signature)\n        external\n        view\n        returns (bool)\n    {\n        (bytes32 r, bytes32 s, uint8 v) = _signature.splitSignature();\n        address oracle = ecrecover(_submissionId.getUnsignedMsg(), v, r, s);\n        return getOracleInfo[oracle].isValid;\n    }\n\n    /* ========== INTERNAL ========== */\n\n    function _countSignatures(bytes memory _signatures) internal pure returns (uint256) {\n        return _signatures.length % 65 == 0 ? _signatures.length / 65 : 0;\n    }\n\n    // ============ Version Control ============\n    /// @dev Get this contract's version\n    function version() external pure returns (uint256) {\n        return 202; // 2.0.2\n    }\n}"
    },
    "contracts/transfers/DeBridgeTokenDeployer.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\n\nimport \"../interfaces/IDeBridgeTokenDeployer.sol\";\nimport \"../periphery/DeBridgeToken.sol\";\nimport \"../periphery/DeBridgeTokenProxy.sol\";\n\n/// @dev Deploys a deToken(DeBridgeTokenProxy) for an asset.\ncontract DeBridgeTokenDeployer is\n    Initializable,\n    AccessControlUpgradeable,\n    IDeBridgeTokenDeployer\n{\n\n    /* ========== STATE VARIABLES ========== */\n\n    /// @dev Address of deBridgeToken implementation\n    address public tokenImplementation;\n    /// @dev An addres to set as admin for any deployed deBridgeToken\n    address public deBridgeTokenAdmin;\n    /// @dev Debridge gate address\n    address public debridgeAddress;\n    /// @dev Maps debridge id to deBridgeToken address\n    mapping(bytes32 => address) public getDeployedAssetAddress;\n    /// @dev Maps debridge id to overridden token info (name, symbol). Used when autogenerated\n    /// values for a token are not ideal.\n    mapping(bytes32 => OverridedTokenInfo) public overridedTokens;\n\n    /* ========== STRUCTS ========== */\n\n    struct OverridedTokenInfo {\n        bool accept;\n        string name;\n        string symbol;\n    }\n\n    /* ========== ERRORS ========== */\n\n    error WrongArgument();\n    error DeployedAlready();\n\n    error AdminBadRole();\n    error DeBridgeGateBadRole();\n\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyAdmin() {\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) revert AdminBadRole();\n        _;\n    }\n\n    modifier onlyDeBridgeGate() {\n        if (msg.sender != debridgeAddress) revert DeBridgeGateBadRole();\n        _;\n    }\n\n\n    /* ========== CONSTRUCTOR  ========== */\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {\n    }\n\n    /// @dev Constructor that initializes the most important configurations.\n    /// @param _tokenImplementation Address of deBridgeToken implementation\n    /// @param _deBridgeTokenAdmin Address to set as admin for any deployed deBridgeToken\n    /// @param _debridgeAddress DeBridge gate address\n    function initialize(\n        address _tokenImplementation,\n        address _deBridgeTokenAdmin,\n        address _debridgeAddress\n    ) public initializer {\n        tokenImplementation = _tokenImplementation;\n        deBridgeTokenAdmin = _deBridgeTokenAdmin;\n        debridgeAddress = _debridgeAddress;\n\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    /// @dev Deploy a deToken for an asset\n    /// @param _debridgeId Asset identifier\n    /// @param _name Asset name\n    /// @param _symbol Asset symbol\n    /// @param _decimals Asset decimals\n    function deployAsset(\n        bytes32 _debridgeId,\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals)\n        external\n        override\n        onlyDeBridgeGate\n        returns (address deBridgeTokenAddress)\n    {\n        if (getDeployedAssetAddress[_debridgeId] != address(0)) revert DeployedAlready();\n\n        OverridedTokenInfo memory overridedToken = overridedTokens[_debridgeId];\n        if (overridedToken.accept) {\n            _name = overridedToken.name;\n            _symbol = overridedToken.symbol;\n        }\n\n        address[] memory minters = new address[](1);\n        minters[0] = debridgeAddress;\n\n        // Initialize args\n        bytes memory initialisationArgs = abi.encodeWithSelector(\n            DeBridgeToken.initialize.selector,\n            _name,\n            _symbol,\n            _decimals,\n            deBridgeTokenAdmin,\n            minters\n        );\n\n        // initialize Proxy\n        bytes memory constructorArgs = abi.encode(address(this), initialisationArgs);\n\n        // deployment code\n        bytes memory bytecode = abi.encodePacked(type(DeBridgeTokenProxy).creationCode, constructorArgs);\n\n        assembly {\n        // debridgeId is a salt\n            deBridgeTokenAddress := create2(0, add(bytecode, 0x20), mload(bytecode), _debridgeId)\n\n            if iszero(extcodesize(deBridgeTokenAddress)) {\n                revert(0, 0)\n            }\n        }\n\n        getDeployedAssetAddress[_debridgeId] = deBridgeTokenAddress;\n        emit DeBridgeTokenDeployed(\n            deBridgeTokenAddress,\n            _name,\n            _symbol,\n            _decimals\n        );\n    }\n\n    /// @dev Beacon getter for the deBridgeToken contracts\n    function implementation() public view returns (address) {\n        return tokenImplementation;\n    }\n\n\n    /* ========== ADMIN ========== */\n\n    /// @dev Set deBridgeToken implementation contract address\n    /// @param _impl Wrapped asset implementation contract address.\n    function setTokenImplementation(address _impl) external onlyAdmin {\n        if (_impl == address(0)) revert WrongArgument();\n        tokenImplementation = _impl;\n    }\n\n    /// @dev Set admin for any deployed deBridgeToken.\n    /// @param _deBridgeTokenAdmin Admin address.\n    function setDeBridgeTokenAdmin(address _deBridgeTokenAdmin) external onlyAdmin {\n        if (_deBridgeTokenAdmin == address(0)) revert WrongArgument();\n        deBridgeTokenAdmin = _deBridgeTokenAdmin;\n    }\n\n    /// @dev Sets core debridge contract address.\n    /// @param _debridgeAddress Debridge address.\n    function setDebridgeAddress(address _debridgeAddress) external onlyAdmin {\n        if (_debridgeAddress == address(0)) revert WrongArgument();\n        debridgeAddress = _debridgeAddress;\n    }\n\n    /// @dev Override specific tokens name/symbol\n    /// @param _debridgeIds Array of debridgeIds for tokens\n    /// @param _tokens Array of new name/symbols for tokens\n    function setOverridedTokenInfo (\n        bytes32[] memory _debridgeIds,\n        OverridedTokenInfo[] memory _tokens\n    ) external onlyAdmin {\n        if (_debridgeIds.length != _tokens.length) revert WrongArgument();\n        for (uint256 i = 0; i < _debridgeIds.length; i++) {\n            overridedTokens[_debridgeIds[i]] = _tokens[i];\n        }\n    }\n\n    // ============ Version Control ============\n    /// @dev Get this contract's version\n    function version() external pure returns (uint256) {\n        return 111; // 1.1.1\n    }\n}\n"
    },
    "contracts/periphery/DeBridgeToken.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\";\nimport \"../interfaces/IDeBridgeToken.sol\";\n\n/// @dev ERC20 token that is used as wrapped asset to represent the native token value on the other chains.\ncontract DeBridgeToken is\n    Initializable,\n    AccessControlUpgradeable,\n    ERC20PausableUpgradeable,\n    IDeBridgeToken\n{\n    /// @dev Minter role identifier\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    /// @dev Pauser role identifier\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n    /// @dev Domain separator as described in [EIP-712](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#rationale)\n    bytes32 public DOMAIN_SEPARATOR;\n    /// @dev Typehash as described in [EIP-712](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#rationale).\n    /// =keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 public constant PERMIT_TYPEHASH =\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n    /// @dev Transfers counter\n    mapping(address => uint256) public nonces;\n    /// @dev Asset's decimals\n    uint8 internal _decimals;\n\n    /* ========== ERRORS ========== */\n\n    error MinterBadRole();\n    error PauserBadRole();\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyMinter() {\n        if (!hasRole(MINTER_ROLE, msg.sender)) revert MinterBadRole();\n        _;\n    }\n\n    modifier onlyPauser() {\n        if (!hasRole(PAUSER_ROLE, msg.sender)) revert PauserBadRole();\n        _;\n    }\n\n    /// @dev Constructor that initializes the most important configurations.\n    /// @param name_ Asset's name.\n    /// @param symbol_ Asset's symbol.\n    /// @param decimals_ Asset's decimals.\n    /// @param admin Address to set as asset's admin.\n    /// @param minters The accounts allowed to int new tokens.\n    function initialize(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_,\n        address admin,\n        address[] memory minters\n    ) public initializer {\n        _decimals = decimals_;\n        name_ = string(abi.encodePacked(\"deBridge \",\n            bytes(name_).length == 0 ? symbol_ : name_));\n        symbol_ = string(abi.encodePacked(\"de\", symbol_));\n\n        __ERC20_init_unchained(name_, symbol_);\n\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\n        _setupRole(PAUSER_ROLE, admin);\n        uint256 mintersCount = minters.length;\n        for (uint256 i = 0; i < mintersCount; i++) {\n            _setupRole(MINTER_ROLE, minters[i]);\n        }\n\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\n                    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n                ),\n                keccak256(bytes(name_)),\n                keccak256(bytes(\"1\")),\n                chainId,\n                address(this)\n            )\n        );\n    }\n\n    /// @inheritdoc IDeBridgeToken\n    function mint(address _receiver, uint256 _amount) external override onlyMinter {\n        _mint(_receiver, _amount);\n    }\n\n    /// @inheritdoc IDeBridgeToken\n    function burn(uint256 _amount) external override onlyMinter {\n        _burn(msg.sender, _amount);\n    }\n\n    /// @dev Approves the spender by signature.\n    /// @param _owner Token's owner.\n    /// @param _spender Account to be approved.\n    /// @param _value Amount to be approved.\n    /// @param _deadline The permit valid until.\n    /// @param _v Signature part.\n    /// @param _r Signature part.\n    /// @param _s Signature part.\n    function permit(\n        address _owner,\n        address _spender,\n        uint256 _value,\n        uint256 _deadline,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) external override {\n        require(_deadline >= block.timestamp, \"permit: EXPIRED\");\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR,\n                keccak256(\n                    abi.encode(\n                        PERMIT_TYPEHASH,\n                        _owner,\n                        _spender,\n                        _value,\n                        nonces[_owner]++,\n                        _deadline\n                    )\n                )\n            )\n        );\n        address recoveredAddress = ecrecover(digest, _v, _r, _s);\n        require(\n            recoveredAddress != address(0) && recoveredAddress == _owner,\n            \"permit: invalid signature\"\n        );\n        _approve(_owner, _spender, _value);\n    }\n\n    /// @dev Asset's decimals\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n\n    /// @dev Pauses all token transfers. The caller must have the `PAUSER_ROLE`.\n    function pause() public onlyPauser {\n        _pause();\n    }\n\n     /// @dev Unpauses all token transfers. The caller must have the `PAUSER_ROLE`.\n    function unpause() public onlyPauser {\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"
    },
    "contracts/periphery/DeBridgeTokenProxy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\n\n/// @dev This contract implements a proxy that gets the implementation address for each call\n/// from DeBridgeTokenDeployer. It's deployed by DeBridgeTokenDeployer.\n/// Implementation is DeBridgeToken.\ncontract DeBridgeTokenProxy is BeaconProxy {\n    constructor(address beacon, bytes memory data) BeaconProxy(beacon, data) {\n\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/ERC20Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../security/PausableUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC20PausableUpgradeable is Initializable, ERC20Upgradeable, PausableUpgradeable {\n    function __ERC20Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n        __ERC20Pausable_init_unchained();\n    }\n\n    function __ERC20Pausable_init_unchained() internal initializer {\n    }\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/beacon/BeaconProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1));\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/periphery/UpgradeableBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol) with AccessControl\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\n/**proxy/beacon/UpgradeableBeacon.sol\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An admin is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, AccessControl {\n    address private _implementation;\n\n    /* ========== ERRORS ========== */\n\n    error AdminBadRole();\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyAdmin() {\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) revert AdminBadRole();\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    constructor(address implementation_) {\n        _setImplementation(implementation_);\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual override returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyAdmin {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(\n            Address.isContract(newImplementation),\n            \"UpgradeableBeacon: implementation is not a contract\"\n        );\n        _implementation = newImplementation;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/mock/MockToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract MockToken is ERC20 {\n    uint8 private _decimals;\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimal\n    ) ERC20(_name, _symbol) {\n        _decimals = _decimal;\n    }\n\n    fallback() external payable { }\n\n    receive() external payable { }\n\n    function mint(address _receiver, uint256 _amount) external {\n        _mint(_receiver, _amount);\n    }\n\n    function burn(uint256 _amount) external {\n        _burn(msg.sender, _amount);\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n}\n"
    },
    "contracts/mock/MockProxyReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../interfaces/ICallProxy.sol\";\n\n// MockProxyReceiver receives payable and non-payable calls from CallProxy.sol.\n// Used for positive proxy tests\ncontract MockProxyReceiver {\n    using SafeERC20 for IERC20;\n\n    uint256 public result = 0;\n    uint256[] public resultArray;\n    uint256 public weiReceived = 0;\n    uint256 public tokensReceived;\n    string public lastHit = \"\";\n    uint256 public submissionChainIdFrom;\n    bytes public submissionNativeSender;\n\n    function setUint256Payable(uint256 _result) external payable {\n        lastHit = \"setUint256Payable\";\n        result = _result;\n        weiReceived = msg.value;\n    }\n\n    function setArrayUint256Payable(uint256[] memory _result) external payable {\n        lastHit = \"setArrayUint256Payable\";\n        resultArray = _result;\n        weiReceived = msg.value;\n    }\n\n    function setArrayAndPullToken(\n        address _token,\n        uint256 _amount,\n        uint256[] memory _result\n    ) external {\n        lastHit = \"setArrayAndPullToken\";\n        resultArray = _result;\n        uint256 balanceBefore = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).safeTransferFrom(address(msg.sender), address(this), _amount);\n        uint256 balanceAfter = IERC20(_token).balanceOf(address(this));\n        tokensReceived = balanceAfter - balanceBefore;\n    }\n\n    function setUint256AndPullToken(\n        address _token,\n        uint256 _amount,\n        uint256 _result\n    ) external {\n        lastHit = \"setUint256AndPullToken\";\n        result = _result;\n        uint256 balanceBefore = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).safeTransferFrom(address(msg.sender), address(this), _amount);\n        uint256 balanceAfter = IERC20(_token).balanceOf(address(this));\n        tokensReceived = balanceAfter - balanceBefore;\n    }\n\n    function pullTokenAndSetNativeSender(\n        address _token,\n        uint256 _amount,\n        uint256 _result\n    ) external {\n        lastHit = \"pullTokenAndSetNativeSender\";\n        result = _result;\n        uint256 balanceBefore = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).safeTransferFrom(address(msg.sender), address(this), _amount);\n        uint256 balanceAfter = IERC20(_token).balanceOf(address(this));\n        tokensReceived = balanceAfter - balanceBefore;\n        submissionChainIdFrom = ICallProxy(msg.sender).submissionChainIdFrom();\n        submissionNativeSender = ICallProxy(msg.sender).submissionNativeSender();\n    }\n\n\n    // This function is called for all messages sent to\n    // this contract, except plain Ether transfers\n    // (there is no other function except the receive function).\n    // Any call with non-empty calldata to this contract will execute\n    // the fallback function (even if Ether is sent along with the call).\n    fallback() external payable {\n        lastHit = \"fallback\";\n        weiReceived = msg.value;\n    }\n\n    // This function is called for plain Ether transfers, i.e.\n    // for every call with empty calldata.\n    receive() external payable {\n        lastHit = \"receive\";\n        weiReceived = msg.value;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/mock/MockProxyConsumer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"../interfaces/ICallProxy.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract MockProxyConsumer {\n    using SafeERC20 for IERC20;\n\n    uint256 public constant CHAIN_ID_FROM = 42;\n\n    address public callProxy;\n    address public token;\n    bool public lastOperationStatus;\n\n    constructor(address _callProxy, address _token) {\n        callProxy = _callProxy;\n        token = _token;\n    }\n\n    function transferToken(\n        address _token,\n        address _receiver,\n        address _fallbackAddress,\n        uint256 _flags,\n        bytes memory _data\n    ) external payable {\n        bool status;\n        if (_token == address(0)) {\n            status = ICallProxy(callProxy).call{value: msg.value}(\n                _fallbackAddress,\n                _receiver,\n                _data,\n                0,\n                \"\",\n                CHAIN_ID_FROM\n            );\n        } else {\n            IERC20(_token).transfer(callProxy, msg.value);\n            status = ICallProxy(callProxy).callERC20(\n                _token,\n                _fallbackAddress,\n                _receiver,\n                _data,\n                _flags,\n                \"\",\n                CHAIN_ID_FROM\n            );\n        }\n        lastOperationStatus = status;\n    }\n}\n"
    },
    "contracts/mock/MockLinkToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\nimport \"../interfaces/IERC677Receiver.sol\";\n\ncontract MockLinkToken is ERC20, ERC20Permit {\n    uint8 private _decimals;\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimal\n    ) ERC20(_name, _symbol) ERC20Permit(_name) {\n        _decimals = _decimal;\n    }\n\n    function mint(address _receiver, uint256 _amount) external {\n        _mint(_receiver, _amount);\n    }\n\n    function burn(uint256 _amount) external {\n        _burn(msg.sender, _amount);\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n\n    function transferAndCall(\n        address _to,\n        uint256 _value,\n        bytes memory _data\n    ) public returns (bool success) {\n        super.transfer(_to, _value);\n        emit Transfer(msg.sender, _to, _value);\n        if (isContract(_to)) {\n            contractFallback(_to, _value, _data);\n        }\n        return true;\n    }\n\n    function contractFallback(\n        address _to,\n        uint256 _value,\n        bytes memory _data\n    ) private {\n        IERC677Receiver receiver = IERC677Receiver(_to);\n        receiver.onTokenTransfer(msg.sender, _value, _data);\n    }\n\n    function isContract(address _addr) private view returns (bool hasCode) {\n        uint256 length;\n        assembly {\n            length := extcodesize(_addr)\n        }\n        return length > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/draft-EIP712.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private immutable _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "contracts/interfaces/IERC677Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IERC677Receiver is IERC20 {\n    function onTokenTransfer(\n        address _sender,\n        uint256 _value,\n        bytes memory _data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "contracts/interfaces/ILinkToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface ILinkToken is IERC20 {\n    function transferAndCall(\n        address to,\n        uint256 value,\n        bytes memory data\n    ) external returns (bool success);\n}\n"
    },
    "contracts/periphery/DeBridgeTokenPaused.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.7;\n\nimport \"../periphery/DeBridgeToken.sol\";\n\n/// @dev Variation of DeBridgeToken contract with paused token transfers.\ncontract DeBridgeTokenPaused is DeBridgeToken {\n\n    function _beforeTokenTransfer(\n        address /* from */,\n        address /* to */,\n        uint256 /* amount */\n    ) internal virtual override {\n        revert(\"DeBridgeToken paused\");\n    }\n}\n"
    },
    "contracts/periphery/SimpleFeeProxy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"../interfaces/IDeBridgeGate.sol\";\n\n/// @dev Helper to withdraw fees from DeBridgeGate and transfer them to a treasury.\ncontract SimpleFeeProxy is Initializable, AccessControlUpgradeable, PausableUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    /* ========== STATE VARIABLES ========== */\n    /// @dev DeBridgeGate address\n    IDeBridgeGate public debridgeGate;\n    /// @dev Treasury address\n    address public treasury;\n\n    /* ========== ERRORS ========== */\n\n    error AdminBadRole();\n    error EmptyTreasuryAddress();\n    error EthTransferFailed();\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyAdmin() {\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) revert AdminBadRole();\n        _;\n    }\n\n    /* ========== CONSTRUCTOR  ========== */\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {\n    }\n\n    function initialize(IDeBridgeGate _debridgeGate, address _treasury) public initializer {\n        debridgeGate = _debridgeGate;\n        treasury = _treasury;\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    /* ========== FUNCTIONS  ========== */\n\n    function pause() external onlyAdmin {\n        _pause();\n    }\n\n    function unpause() external onlyAdmin {\n        _unpause();\n    }\n\n    function setDebridgeGate(IDeBridgeGate _debridgeGate) external onlyAdmin {\n        debridgeGate = _debridgeGate;\n    }\n\n    function setTreasury(address _treasury) external onlyAdmin {\n        treasury = _treasury;\n    }\n\n    /// @dev Transfer collected fees for a token to the treasury.\n    /// @param _tokenAddress Address of a deToken on a current chain.\n    function withdrawFee(address _tokenAddress) external whenNotPaused {\n        if (treasury == address(0)) revert EmptyTreasuryAddress();\n\n        (uint256 nativeChainId, bytes memory nativeAddress) = debridgeGate.getNativeInfo(\n            _tokenAddress\n        );\n        bytes32 debridgeId = getbDebridgeId(nativeChainId, nativeAddress);\n        debridgeGate.withdrawFee(debridgeId);\n\n        uint256 amount = IERC20Upgradeable(_tokenAddress).balanceOf(address(this));\n        IERC20Upgradeable(_tokenAddress).safeTransfer(treasury, amount);\n    }\n\n    /// @dev Transfer collected fees for a native token to the treasury.\n    function withdrawNativeFee() external  whenNotPaused {\n        if (treasury == address(0)) revert EmptyTreasuryAddress();\n\n        bytes32 debridgeId = getDebridgeId(getChainId(), address(0));\n        debridgeGate.withdrawFee(debridgeId);\n\n        uint256 amount = address(this).balance;\n         _safeTransferETH(treasury, amount);\n    }\n\n    // accept ETH\n    receive() external payable {}\n\n    /* ========== VIEW FUNCTIONS  ========== */\n\n    /// @dev Calculates asset identifier.\n    /// @param _chainId Current chain id.\n    /// @param _tokenAddress Address of the asset on the other chain.\n    function getbDebridgeId(uint256 _chainId, bytes memory _tokenAddress)\n        public\n        pure\n        returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(_chainId, _tokenAddress));\n    }\n\n    /// @dev Calculates asset identifier.\n    /// @param _chainId Current chain id.\n    /// @param _tokenAddress Address of the asset on the other chain.\n    function getDebridgeId(uint256 _chainId, address _tokenAddress) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_chainId, _tokenAddress));\n    }\n\n    /// @dev Get current chain id\n    function getChainId() public view virtual returns (uint256 cid) {\n        assembly {\n            cid := chainid()\n        }\n    }\n\n    /* ========== PRIVATE FUNCTIONS  ========== */\n\n    /// @dev transfer ETH to an address, revert if it fails.\n    /// @param to recipient of the transfer\n    /// @param value the amount to send\n    function _safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        if (!success) revert EthTransferFailed();\n    }\n\n    // ============ Version Control ============\n    /// @dev Get this contract's version\n    function version() external pure returns (uint256) {\n        return 401; // 4.0.1\n    }\n}\n"
    },
    "contracts/periphery/FeeProxy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"../interfaces/IUniswapV2Pair.sol\";\nimport \"../interfaces/IUniswapV2Factory.sol\";\nimport \"../interfaces/IFeeProxy.sol\";\nimport \"../interfaces/IDeBridgeGate.sol\";\nimport \"../interfaces/IWETH.sol\";\n\ncontract FeeProxy is Initializable, AccessControlUpgradeable, PausableUpgradeable, IFeeProxy {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    /* ========== STATE VARIABLES ========== */\n\n    uint256 public constant BPS_DENOMINATOR = 10000;\n    bytes32 public constant WORKER_ROLE = keccak256(\"WORKER_ROLE\"); // role allowed to withdraw fee\n\n    IWETH public weth; // wrapped native token contract\n\n    IDeBridgeGate public debridgeGate;\n    IUniswapV2Factory public uniswapFactory;\n\n    mapping(uint256 => bytes) public feeProxyAddresses; //Addresses of fee proxy addresses in each chain\n    mapping(uint256 => bytes) public treasuryAddresses;\n\n    uint256 public constant ETH_CHAINID = 1; //Ethereum chainId\n    address public deEthToken; //address of deETH token\n\n    /* ========== ERRORS ========== */\n\n    error AdminBadRole();\n    error WorkerBadRole();\n    error EmptyFeeProxyAddress(uint256 chainId);\n    error EmptyTreasuryAddress(uint256 chainId);\n\n    error InsuffientAmountIn();\n    error InsuffientLiquidity();\n\n    error CantConvertAddress();\n    error WrongArgument();\n    error EthTransferFailed();\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyWorker() {\n        if (!hasRole(WORKER_ROLE, msg.sender)) revert WorkerBadRole();\n        _;\n    }\n\n    modifier onlyAdmin() {\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) revert AdminBadRole();\n        _;\n    }\n\n    /* ========== CONSTRUCTOR  ========== */\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {\n    }\n\n    function initialize(IUniswapV2Factory _uniswapFactory, IWETH _weth) public initializer {\n        uniswapFactory = _uniswapFactory;\n        weth = _weth;\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    /* ========== FUNCTIONS  ========== */\n\n    function pause() external onlyAdmin {\n        _pause();\n    }\n\n    function unpause() external onlyAdmin {\n        _unpause();\n    }\n\n    function setUniswapFactory(IUniswapV2Factory _uniswapFactory) external onlyAdmin {\n        uniswapFactory = _uniswapFactory;\n    }\n\n    function setDebridgeGate(IDeBridgeGate _debridgeGate) external onlyAdmin {\n        debridgeGate = _debridgeGate;\n    }\n\n    function setTreasury(uint256 _chainId, bytes memory _treasuryAddress) external onlyAdmin {\n        treasuryAddresses[_chainId] = _treasuryAddress;\n    }\n\n    function setDeEthToken(address _deEthToken) external onlyAdmin {\n        if (_deEthToken == address(0)) revert WrongArgument();\n        deEthToken = _deEthToken;\n    }\n\n    function setFeeProxyAddress(uint256 _chainId, bytes memory _address) external onlyAdmin {\n        feeProxyAddresses[_chainId] = _address;\n    }\n\n    /// @dev Transfer tokens to native chain and then create swap to deETH\n    /// and transfer reward to Ethereum network.\n    function withdrawFee(address _tokenAddress) external payable override onlyWorker whenNotPaused {\n        uint256 chainId = getChainId();\n        if (treasuryAddresses[chainId].length == 0) revert EmptyTreasuryAddress(chainId);\n\n        (uint256 nativeChainId, bytes memory nativeAddress) = debridgeGate.getNativeInfo(\n            _tokenAddress\n        );\n        if (feeProxyAddresses[nativeChainId].length == 0) revert EmptyFeeProxyAddress(nativeChainId);\n\n        bytes32 debridgeId = getbDebridgeId(nativeChainId, nativeAddress);\n        address currentTreasuryAddress = toAddress(treasuryAddresses[chainId]);\n\n        debridgeGate.withdrawFee(debridgeId);\n        uint256 amount = IERC20Upgradeable(_tokenAddress).balanceOf(address(this));\n        // original token chain is the same as contract chain\n        if (chainId == nativeChainId) {\n            //Reward is token (DBR, LINK, WETH, deDBT, deLINK, deETH)\n            //If token is deETH\n            if (_tokenAddress == deEthToken) {\n                //Create transfer to Ehereum netrowk ETH\n                _burnTransfer(_tokenAddress, amount, nativeChainId, msg.value);\n            }\n            //For others tokens\n            else {\n                // create swap to weth\n                if (_tokenAddress != address(weth)) {\n                    _swap(_tokenAddress, address(weth), address(this));\n                }\n                //If we are in Ethereum chain transfer to Treasury\n                if (chainId == ETH_CHAINID) {\n                    IERC20Upgradeable(address(weth)).safeTransfer(\n                        address(currentTreasuryAddress),\n                        weth.balanceOf(address(this))\n                    );\n                } else {\n                    //create swap from Native token to deETH\n                    _swap(address(weth), deEthToken, address(this));\n                    //transfer deETH to Ethereum\n                    uint256 deEthAmount = IERC20Upgradeable(deEthToken).balanceOf(address(this));\n                    _burnTransfer(deEthToken, deEthAmount, ETH_CHAINID, msg.value);\n                }\n            }\n        }\n        //create transfer if different chains\n        else {\n            _burnTransfer(_tokenAddress, amount, nativeChainId, msg.value);\n        }\n    }\n\n    /// @dev Swap native tokens to deETH and then transfer reward to Ethereum network.\n    function withdrawNativeFee() external payable override onlyWorker whenNotPaused {\n        uint256 chainId = getChainId();\n        //DebridgeId of weth in ethereum network\n        //TODO: can be set as contstant\n        // (, bytes memory nativeAddress) = debridgeGate.getNativeTokenInfo(deEthToken);\n        if (feeProxyAddresses[chainId].length == 0) revert EmptyFeeProxyAddress(chainId);\n\n        // TODO: treasuryAddresses can keep only for ETH network\n        // if (treasuryAddresses[chainId].length == 0) revert EmptyTreasuryAddress(chainId);\n\n        // address currentTreasuryAddress = toAddress(treasuryAddresses[chainId]);\n        debridgeGate.withdrawFee(getDebridgeId(chainId, address(0)));\n        uint256 amount = address(this).balance - msg.value;\n\n        //reward is native token (ETH/BNB/HT)\n        //If we are in Ethereum chain\n        if (chainId == ETH_CHAINID) {\n            if (treasuryAddresses[chainId].length == 0) revert EmptyTreasuryAddress(chainId);\n            address currentTreasuryAddress = toAddress(treasuryAddresses[chainId]);\n            //TODO: send 50% reward to slashing contract\n            _safeTransferETH(currentTreasuryAddress, amount);\n        }\n        //If we are not in Ethereum chain\n        else {\n            //Wrap native token\n            weth.deposit{value: amount}();\n            //create swap (BNB/HT) to deETH\n            _swap(address(weth), deEthToken, address(this));\n            uint256 deEthBalance = IERC20Upgradeable(deEthToken).balanceOf(address(this));\n            //transfer deETH to Ethereum\n            _burnTransfer(\n                deEthToken,\n                deEthBalance,\n                ETH_CHAINID,\n                msg.value\n            );\n        }\n    }\n\n    // accept ETH\n    receive() external payable {}\n\n    /* ========== VIEW FUNCTIONS  ========== */\n\n    /// @dev Calculates asset identifier.\n    /// @param _chainId Current chain id.\n    /// @param _tokenAddress Address of the asset on the other chain.\n    function getbDebridgeId(uint256 _chainId, bytes memory _tokenAddress)\n        public\n        pure\n        returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(_chainId, _tokenAddress));\n    }\n\n    function getDebridgeId(uint256 _chainId, address _tokenAddress) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_chainId, _tokenAddress));\n    }\n\n    /* ========== PRIVATE FUNCTIONS  ========== */\n\n    /// @dev Create auto burn transfer with data that will call Transfer fee method in the target network\n    function _burnTransfer(\n        address _erc20Token,\n        uint256 _amount,\n        uint256 _nativeChainId,\n        uint256 _nativeFixFee\n    ) private {\n        IERC20Upgradeable(_erc20Token).safeApprove(address(debridgeGate), _amount);\n        debridgeGate.send{value: _nativeFixFee}(\n            _erc20Token,\n            _amount,\n            _nativeChainId, //_chainIdTo,\n            feeProxyAddresses[_nativeChainId], //_receiver,\n            \"\", //_deadline + _signature,\n            false, //_useAssetFee,\n            0, //_referralCode\n            \"\" // _autoParams\n        );\n    }\n\n    function _swap(\n        address _fromToken,\n        address _toToken,\n        address _receiver\n    ) private {\n        IERC20Upgradeable erc20 = IERC20Upgradeable(_fromToken);\n        uint256 _amount = erc20.balanceOf(address(this));\n        IUniswapV2Pair uniswapPair = IUniswapV2Pair(uniswapFactory.getPair(_toToken, _fromToken));\n        erc20.safeTransfer(address(uniswapPair), _amount);\n\n        bool toFirst = _toToken < _fromToken;\n\n        (uint256 reserve0, uint256 reserve1, ) = uniswapPair.getReserves();\n        if (toFirst) {\n            uint256 amountOut = getAmountOut(_amount, reserve1, reserve0);\n            uniswapPair.swap(amountOut, 0, _receiver, \"\");\n        } else {\n            uint256 amountOut = getAmountOut(_amount, reserve0, reserve1);\n            uniswapPair.swap(0, amountOut, _receiver, \"\");\n        }\n    }\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) private pure returns (uint256 amountOut) {\n        if (amountIn == 0) revert InsuffientAmountIn();\n        if (reserveIn == 0 || reserveOut == 0) revert InsuffientLiquidity();\n        uint256 amountInWithFee = amountIn * 997;\n        uint256 numerator = amountInWithFee * reserveOut;\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\n        amountOut = numerator / denominator;\n    }\n\n    function toAddress(bytes memory _bytes) internal pure returns (address result) {\n        if (_bytes.length != 20) revert CantConvertAddress();\n        // if address was packed using abi.encodedPacked then it's needed\n        // to pad left to get the correct bytes back div by 0x1.... is like doing >> 96\n        assembly {\n            result := div(mload(add(_bytes, 0x20)), 0x1000000000000000000000000)\n        }\n    }\n\n    function getChainId() public view virtual returns (uint256 cid) {\n        assembly {\n            cid := chainid()\n        }\n    }\n\n    /*\n    * @dev transfer ETH to an address, revert if it fails.\n    * @param to recipient of the transfer\n    * @param value the amount to send\n    */\n    function _safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        if (!success) revert EthTransferFailed();\n    }\n\n    // ============ Version Control ============\n    function version() external pure returns (uint256) {\n        return 401; // 4.0.1\n    }\n}\n"
    },
    "contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/interfaces/IFeeProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IFeeProxy {\n    function withdrawFee(address _tokenAddress) external payable;\n\n    /// @dev Swap  Native tokens to deETH and then transfer reward to Ethereum network.\n    function withdrawNativeFee() external payable;\n}\n"
    },
    "contracts/transfers/WethGate.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.7;\n\nimport \"../interfaces/IWETH.sol\";\nimport \"../interfaces/IWethGate.sol\";\n\n/// @dev Upgradable contracts cannot receive ether via `transfer` because of increased SLOAD gas cost.\n/// We use this non-upgradeable contract as the recipient and then immediately transfer to an upgradable contract.\n/// More details about this issue can be found\n/// [here](https://forum.openzeppelin.com/t/openzeppelin-upgradeable-contracts-affected-by-istanbul-hardfork/1616).\ncontract WethGate is IWethGate\n{\n    /// @dev Wrapped native token contract\n    IWETH public weth;\n\n    /* ========== ERRORS ========== */\n\n    error EthTransferFailed();\n\n    /* ========== EVENTS ========== */\n    /// @dev Emitted when any amount is withdrawn.\n    event Withdrawal(address indexed receiver, uint wad);\n\n    /* ========== CONSTRUCTOR  ========== */\n\n    constructor(IWETH _weth) {\n        weth = _weth;\n    }\n\n    /// @inheritdoc IWethGate\n    function withdraw(address _receiver, uint _wad) external override {\n        weth.withdraw(_wad);\n        _safeTransferETH(_receiver, _wad);\n        emit Withdrawal(_receiver, _wad);\n    }\n\n    function _safeTransferETH(address _to, uint256 _value) internal {\n        (bool success, ) = _to.call{value: _value}(new bytes(0));\n        if (!success) revert EthTransferFailed();\n    }\n\n    // we need to accept ETH sends to unwrap WETH\n    receive() external payable {\n    }\n\n    // ============ Version Control ============\n    /// @dev Get this contract's version\n    function version() external pure returns (uint256) {\n        return 101; // 1.0.1\n    }\n}\n"
    },
    "contracts/mock/MockFeeProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../periphery/FeeProxy.sol\";\n\ncontract MockFeeProxy is FeeProxy {\n    uint256 chainId;\n\n    function initializeMock(IUniswapV2Factory _uniswapFactory, IWETH _weth) public initializer {\n        FeeProxy.initialize(_uniswapFactory, _weth);\n    }\n\n    /// @dev override chain id (BSC/HECO)\n    function overrideChainId(uint256 _chainId) external onlyAdmin {\n        chainId = _chainId;\n    }\n\n    // return overrided chain id\n    function getChainId() public view override returns (uint256 cid) {\n        return chainId;\n    }\n}\n"
    },
    "contracts/mock/MockExternalContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../interfaces/IDeBridgeGate.sol\";\n\ncontract MockExternalContract {\n\n    function readIsSubmissionUsed(\n        IDeBridgeGate _gate,\n        bytes32 _debridgeId\n    ) external returns (bool) {\n        return _gate.isSubmissionUsed(_debridgeId);\n    }\n}\n"
    },
    "contracts/mock/MockDeBridgeGateForDefiController.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../transfers/DeBridgeGate.sol\";\n\ncontract MockDeBridgeGateForDefiController is DeBridgeGate {\n    function init() external {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function sendETH() external payable {}\n\n    function addDebridge(\n        address tokenAddress,\n        uint256 chainId,\n        uint256 maxAmount,\n        uint256 collectedFees,\n        uint256 balance,\n        uint256 lockedInStrategies,\n        uint16 minReservesBps,\n        uint256 chainFee,\n        bool exist\n    ) public {\n        bytes32 debridgeId = getDebridgeId(chainId, tokenAddress);\n        DebridgeInfo storage debridge = getDebridge[debridgeId];\n        debridge.tokenAddress = tokenAddress;\n        debridge.maxAmount = maxAmount;\n        getDebridgeFeeInfo[debridgeId].collectedFees = collectedFees;\n        debridge.balance = balance;\n        debridge.lockedInStrategies = lockedInStrategies;\n        debridge.minReservesBps = minReservesBps;\n        getDebridgeFeeInfo[debridgeId].getChainFee[chainId] = chainFee;\n        debridge.exist = exist;\n    }\n\n    // override chain id\n    function getChainId() public pure override returns (uint256 cid) {\n        return 1;\n    }\n}\n"
    },
    "contracts/mock/MockDeBridgeGate.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../transfers/DeBridgeGate.sol\";\n\ncontract MockDeBridgeGate is DeBridgeGate {\n    uint256 public chainId;\n\n    /* ========== CONSTRUCTOR  ========== */\n\n    /// @dev Constructor that initializes the most important configurations.\n    /// @param _signatureVerifier Aggregator address to verify signatures\n    function initializeMock(\n        uint8 _excessConfirmations,\n        address _signatureVerifier,\n        address _callProxy,\n        IWETH _weth,\n        address _feeProxy,\n        address _deBridgeTokenDeployer,\n        uint256 overrideChainId\n    ) public initializer {\n        chainId = overrideChainId;\n\n        signatureVerifier = _signatureVerifier;\n\n        callProxy = _callProxy;\n        excessConfirmations = _excessConfirmations;\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n\n        weth = _weth;\n        feeProxy = _feeProxy;\n        deBridgeTokenDeployer = _deBridgeTokenDeployer;\n    }\n\n    // return overrided chain id\n    function getChainId() public view override returns (uint256 cid) {\n        return chainId;\n    }\n\n    /// @dev Calculate submission id.\n    /// @param _debridgeId Asset identifier.\n    /// @param _chainIdFrom Chain identifier of the chain where tokens are sent from.\n    /// @param _chainIdTo Chain identifier of the chain where tokens are sent to.\n    /// @param _receiver Receiver address.\n    /// @param _amount Amount of the transfered asset (note: the fee can be applyed).\n    /// @param _nonce Submission id.\n    function getSubmissionId(\n        bytes32 _debridgeId,\n        uint256 _chainIdFrom,\n        uint256 _chainIdTo,\n        uint256 _amount,\n        address _receiver,\n        uint256 _nonce\n    ) public pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(SUBMISSION_PREFIX, _debridgeId, _chainIdFrom, _chainIdTo, _amount, _receiver, _nonce)\n            );\n    }\n\n    // function getEncodePackedFROM(\n    //     bytes memory _nativeSender,\n    //     bytes32 _debridgeId,\n    //     uint256 _chainIdFrom,\n    //     uint256 _amount,\n    //     address _receiver,\n    //     uint256 _nonce,//hello\n    //     address _fallbackAddress,\n    //     uint256 _executionFee,\n    //     bytes memory _data\n    // ) public view returns (bytes memory) {\n    //     return\n    //             abi.encodePacked(\n    //                 // To avoid error:\n    //                 // Variable value0 is 1 slot(s) too deep inside the stack.\n    //                 abi.encodePacked(\n    //                     //TODO: ALARM CHECK that we have the same abi.encodePacked from and TO getAutoSubmissionIdTo\n    //                     _nativeSender,\n    //                     _debridgeId,\n    //                     _chainIdFrom\n    //                 ),\n    //                 getChainId(),//_chainIdTo,\n    //                 _amount,\n    //                 _receiver,\n    //                 _nonce,\n    //                 _fallbackAddress,\n    //                 _executionFee,\n    //                 _data\n    //             );\n    // }\n\n    // function getEncodePackedTO(\n    //     bytes32 _debridgeId,\n    //     uint256 _chainIdTo,\n    //     uint256 _amount,\n    //     bytes memory _receiver,\n    //     // uint256 _nonce,\n    //     bytes memory _fallbackAddress,\n    //     uint256 _executionFee,\n    //     bytes memory _data\n    // ) public view returns  (bytes memory) {\n    //     return\n    //             abi.encodePacked(\n    //                 address(this), // only for test\n    //                 // msg.sender,\n    //                 _debridgeId,\n    //                 getChainId(),\n    //                 _chainIdTo,\n    //                 _amount,\n    //                 _receiver,\n    //                 nonce, //_nonce,\n    //                 _fallbackAddress,\n    //                 _executionFee,\n    //                 _data\n    //             );\n    // }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}